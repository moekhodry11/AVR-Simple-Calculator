
Keypad_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000029ba  00002a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800088  00800088  00002a76  2**0
                  ALLOC
  3 .stab         000021c0  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f78  00000000  00000000  00004c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009744  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000098a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a2ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4b 12 	call	0x2496	; 0x2496 <main>
      8a:	0c 94 db 14 	jmp	0x29b6	; 0x29b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 14 	jmp	0x2952	; 0x2952 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 14 	jmp	0x2992	; 0x2992 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit         (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f e0       	ldi	r24, 0x0F	; 15
     b54:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	80 83       	st	Z, r24
						   DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	80 83       	st	Z, r24
						   DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);						   

	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	80 83       	st	Z, r24
						   DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);
											                    
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE,DIO_u8_PB6_INTIAL_VALUE,DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
     b74:	e8 e3       	ldi	r30, 0x38	; 56
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	10 82       	st	Z, r1
						   DIO_u8_PB3_INTIAL_VALUE,DIO_u8_PB2_INTIAL_VALUE,DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
											 
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
						   DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);
											 
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
						   DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <DIO_u8SetPinDirection>:

u8  DIO_u8SetPinDirection (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinDirection)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	2e 97       	sbiw	r28, 0x0e	; 14
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6b 83       	std	Y+3, r22	; 0x03
     ba4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT) || (Copy_u8PinDirection == DIO_u8_INPUT)))		
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <DIO_u8SetPinDirection+0x26>
     bb0:	0c c1       	rjmp	.+536    	; 0xdca <DIO_u8SetPinDirection+0x23e>
     bb2:	8b 81       	ldd	r24, Y+3	; 0x03
     bb4:	88 30       	cpi	r24, 0x08	; 8
     bb6:	08 f0       	brcs	.+2      	; 0xbba <DIO_u8SetPinDirection+0x2e>
     bb8:	08 c1       	rjmp	.+528    	; 0xdca <DIO_u8SetPinDirection+0x23e>
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <DIO_u8SetPinDirection+0x3c>
     bc0:	8c 81       	ldd	r24, Y+4	; 0x04
     bc2:	88 23       	and	r24, r24
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <DIO_u8SetPinDirection+0x3c>
     bc6:	01 c1       	rjmp	.+514    	; 0xdca <DIO_u8SetPinDirection+0x23e>
	{
		switch (Copy_u8PortId)
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3e 87       	std	Y+14, r19	; 0x0e
     bd0:	2d 87       	std	Y+13, r18	; 0x0d
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <DIO_u8SetPinDirection+0x52>
     bdc:	4f c0       	rjmp	.+158    	; 0xc7c <DIO_u8SetPinDirection+0xf0>
     bde:	2d 85       	ldd	r18, Y+13	; 0x0d
     be0:	3e 85       	ldd	r19, Y+14	; 0x0e
     be2:	22 30       	cpi	r18, 0x02	; 2
     be4:	31 05       	cpc	r19, r1
     be6:	2c f4       	brge	.+10     	; 0xbf2 <DIO_u8SetPinDirection+0x66>
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	71 f0       	breq	.+28     	; 0xc0c <DIO_u8SetPinDirection+0x80>
     bf0:	ed c0       	rjmp	.+474    	; 0xdcc <DIO_u8SetPinDirection+0x240>
     bf2:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf4:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf6:	22 30       	cpi	r18, 0x02	; 2
     bf8:	31 05       	cpc	r19, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <DIO_u8SetPinDirection+0x72>
     bfc:	77 c0       	rjmp	.+238    	; 0xcec <DIO_u8SetPinDirection+0x160>
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	91 05       	cpc	r25, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <DIO_u8SetPinDirection+0x7e>
     c08:	a9 c0       	rjmp	.+338    	; 0xd5c <DIO_u8SetPinDirection+0x1d0>
     c0a:	e0 c0       	rjmp	.+448    	; 0xdcc <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinDirection)
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	3c 87       	std	Y+12, r19	; 0x0c
     c14:	2b 87       	std	Y+11, r18	; 0x0b
     c16:	8b 85       	ldd	r24, Y+11	; 0x0b
     c18:	9c 85       	ldd	r25, Y+12	; 0x0c
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	d1 f0       	breq	.+52     	; 0xc52 <DIO_u8SetPinDirection+0xc6>
     c1e:	2b 85       	ldd	r18, Y+11	; 0x0b
     c20:	3c 85       	ldd	r19, Y+12	; 0x0c
     c22:	21 30       	cpi	r18, 0x01	; 1
     c24:	31 05       	cpc	r19, r1
     c26:	09 f0       	breq	.+2      	; 0xc2a <DIO_u8SetPinDirection+0x9e>
     c28:	d1 c0       	rjmp	.+418    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     c2a:	aa e3       	ldi	r26, 0x3A	; 58
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ea e3       	ldi	r30, 0x3A	; 58
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	48 2f       	mov	r20, r24
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 2e       	mov	r0, r18
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <DIO_u8SetPinDirection+0xbc>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <DIO_u8SetPinDirection+0xb8>
     c4c:	84 2b       	or	r24, r20
     c4e:	8c 93       	st	X, r24
     c50:	bd c0       	rjmp	.+378    	; 0xdcc <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     c52:	aa e3       	ldi	r26, 0x3A	; 58
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e3       	ldi	r30, 0x3A	; 58
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	48 2f       	mov	r20, r24
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_u8SetPinDirection+0xe4>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_u8SetPinDirection+0xe0>
     c74:	80 95       	com	r24
     c76:	84 23       	and	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	a8 c0       	rjmp	.+336    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinDirection)
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	3a 87       	std	Y+10, r19	; 0x0a
     c84:	29 87       	std	Y+9, r18	; 0x09
     c86:	89 85       	ldd	r24, Y+9	; 0x09
     c88:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	d1 f0       	breq	.+52     	; 0xcc2 <DIO_u8SetPinDirection+0x136>
     c8e:	29 85       	ldd	r18, Y+9	; 0x09
     c90:	3a 85       	ldd	r19, Y+10	; 0x0a
     c92:	21 30       	cpi	r18, 0x01	; 1
     c94:	31 05       	cpc	r19, r1
     c96:	09 f0       	breq	.+2      	; 0xc9a <DIO_u8SetPinDirection+0x10e>
     c98:	99 c0       	rjmp	.+306    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     c9a:	a7 e3       	ldi	r26, 0x37	; 55
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	48 2f       	mov	r20, r24
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	02 2e       	mov	r0, r18
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <DIO_u8SetPinDirection+0x12c>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <DIO_u8SetPinDirection+0x128>
     cbc:	84 2b       	or	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	85 c0       	rjmp	.+266    	; 0xdcc <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     cc2:	a7 e3       	ldi	r26, 0x37	; 55
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e3       	ldi	r30, 0x37	; 55
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_u8SetPinDirection+0x154>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_u8SetPinDirection+0x150>
     ce4:	80 95       	com	r24
     ce6:	84 23       	and	r24, r20
     ce8:	8c 93       	st	X, r24
     cea:	70 c0       	rjmp	.+224    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinDirection)
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	38 87       	std	Y+8, r19	; 0x08
     cf4:	2f 83       	std	Y+7, r18	; 0x07
     cf6:	8f 81       	ldd	r24, Y+7	; 0x07
     cf8:	98 85       	ldd	r25, Y+8	; 0x08
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	d1 f0       	breq	.+52     	; 0xd32 <DIO_u8SetPinDirection+0x1a6>
     cfe:	2f 81       	ldd	r18, Y+7	; 0x07
     d00:	38 85       	ldd	r19, Y+8	; 0x08
     d02:	21 30       	cpi	r18, 0x01	; 1
     d04:	31 05       	cpc	r19, r1
     d06:	09 f0       	breq	.+2      	; 0xd0a <DIO_u8SetPinDirection+0x17e>
     d08:	61 c0       	rjmp	.+194    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     d0a:	a4 e3       	ldi	r26, 0x34	; 52
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e4 e3       	ldi	r30, 0x34	; 52
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	48 2f       	mov	r20, r24
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_u8SetPinDirection+0x19c>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_u8SetPinDirection+0x198>
     d2c:	84 2b       	or	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	4d c0       	rjmp	.+154    	; 0xdcc <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     d32:	a4 e3       	ldi	r26, 0x34	; 52
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e4 e3       	ldi	r30, 0x34	; 52
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_u8SetPinDirection+0x1c4>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_u8SetPinDirection+0x1c0>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	38 c0       	rjmp	.+112    	; 0xdcc <DIO_u8SetPinDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinDirection)
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3e 83       	std	Y+6, r19	; 0x06
     d64:	2d 83       	std	Y+5, r18	; 0x05
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	c9 f0       	breq	.+50     	; 0xda0 <DIO_u8SetPinDirection+0x214>
     d6e:	2d 81       	ldd	r18, Y+5	; 0x05
     d70:	3e 81       	ldd	r19, Y+6	; 0x06
     d72:	21 30       	cpi	r18, 0x01	; 1
     d74:	31 05       	cpc	r19, r1
     d76:	51 f5       	brne	.+84     	; 0xdcc <DIO_u8SetPinDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     d78:	a1 e3       	ldi	r26, 0x31	; 49
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 e3       	ldi	r30, 0x31	; 49
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_u8SetPinDirection+0x20a>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_u8SetPinDirection+0x206>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	16 c0       	rjmp	.+44     	; 0xdcc <DIO_u8SetPinDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     da0:	a1 e3       	ldi	r26, 0x31	; 49
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e1 e3       	ldi	r30, 0x31	; 49
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_u8SetPinDirection+0x232>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_u8SetPinDirection+0x22e>
     dc2:	80 95       	com	r24
     dc4:	84 23       	and	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <DIO_u8SetPinDirection+0x240>
			break;			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     dca:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dce:	2e 96       	adiw	r28, 0x0e	; 14
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <DIO_u8SetPinValue>:

u8  DIO_u8SetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 Copy_u8PinValue)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	2e 97       	sbiw	r28, 0x0e	; 14
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	6b 83       	std	Y+3, r22	; 0x03
     df8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	08 f0       	brcs	.+2      	; 0xe06 <DIO_u8SetPinValue+0x26>
     e04:	08 c1       	rjmp	.+528    	; 0x1016 <DIO_u8SetPinValue+0x236>
	{
		switch (Copy_u8PortId)
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3e 87       	std	Y+14, r19	; 0x0e
     e0e:	2d 87       	std	Y+13, r18	; 0x0d
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <DIO_u8SetPinValue+0x3c>
     e1a:	50 c0       	rjmp	.+160    	; 0xebc <DIO_u8SetPinValue+0xdc>
     e1c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	2c f4       	brge	.+10     	; 0xe30 <DIO_u8SetPinValue+0x50>
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	71 f0       	breq	.+28     	; 0xe4a <DIO_u8SetPinValue+0x6a>
     e2e:	f1 c0       	rjmp	.+482    	; 0x1012 <DIO_u8SetPinValue+0x232>
     e30:	2d 85       	ldd	r18, Y+13	; 0x0d
     e32:	3e 85       	ldd	r19, Y+14	; 0x0e
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <DIO_u8SetPinValue+0x5c>
     e3a:	79 c0       	rjmp	.+242    	; 0xf2e <DIO_u8SetPinValue+0x14e>
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <DIO_u8SetPinValue+0x68>
     e46:	ac c0       	rjmp	.+344    	; 0xfa0 <DIO_u8SetPinValue+0x1c0>
     e48:	e4 c0       	rjmp	.+456    	; 0x1012 <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PinValue)
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3c 87       	std	Y+12, r19	; 0x0c
     e52:	2b 87       	std	Y+11, r18	; 0x0b
     e54:	8b 85       	ldd	r24, Y+11	; 0x0b
     e56:	9c 85       	ldd	r25, Y+12	; 0x0c
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	c9 f0       	breq	.+50     	; 0xe8e <DIO_u8SetPinValue+0xae>
     e5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     e5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	49 f5       	brne	.+82     	; 0xeb8 <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     e66:	ab e3       	ldi	r26, 0x3B	; 59
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	eb e3       	ldi	r30, 0x3B	; 59
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_u8SetPinValue+0xa4>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_u8SetPinValue+0xa0>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	c5 c0       	rjmp	.+394    	; 0x1018 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinValue+0xcc>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinValue+0xc8>
     eb0:	80 95       	com	r24
     eb2:	84 23       	and	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	b0 c0       	rjmp	.+352    	; 0x1018 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
     eb8:	19 82       	std	Y+1, r1	; 0x01
     eba:	ae c0       	rjmp	.+348    	; 0x1018 <DIO_u8SetPinValue+0x238>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PinValue)
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3a 87       	std	Y+10, r19	; 0x0a
     ec4:	29 87       	std	Y+9, r18	; 0x09
     ec6:	89 85       	ldd	r24, Y+9	; 0x09
     ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	c9 f0       	breq	.+50     	; 0xf00 <DIO_u8SetPinValue+0x120>
     ece:	29 85       	ldd	r18, Y+9	; 0x09
     ed0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed2:	21 30       	cpi	r18, 0x01	; 1
     ed4:	31 05       	cpc	r19, r1
     ed6:	49 f5       	brne	.+82     	; 0xf2a <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     ed8:	a8 e3       	ldi	r26, 0x38	; 56
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e8 e3       	ldi	r30, 0x38	; 56
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_u8SetPinValue+0x116>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_u8SetPinValue+0x112>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	8c c0       	rjmp	.+280    	; 0x1018 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     f00:	a8 e3       	ldi	r26, 0x38	; 56
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e8 e3       	ldi	r30, 0x38	; 56
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_u8SetPinValue+0x13e>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_u8SetPinValue+0x13a>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	77 c0       	rjmp	.+238    	; 0x1018 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
     f2a:	19 82       	std	Y+1, r1	; 0x01
     f2c:	75 c0       	rjmp	.+234    	; 0x1018 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PinValue)
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	38 87       	std	Y+8, r19	; 0x08
     f36:	2f 83       	std	Y+7, r18	; 0x07
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	c9 f0       	breq	.+50     	; 0xf72 <DIO_u8SetPinValue+0x192>
     f40:	2f 81       	ldd	r18, Y+7	; 0x07
     f42:	38 85       	ldd	r19, Y+8	; 0x08
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	49 f5       	brne	.+82     	; 0xf9c <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     f4a:	a5 e3       	ldi	r26, 0x35	; 53
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e5 e3       	ldi	r30, 0x35	; 53
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	48 2f       	mov	r20, r24
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 2e       	mov	r0, r18
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_u8SetPinValue+0x188>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_u8SetPinValue+0x184>
     f6c:	84 2b       	or	r24, r20
     f6e:	8c 93       	st	X, r24
     f70:	53 c0       	rjmp	.+166    	; 0x1018 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     f72:	a5 e3       	ldi	r26, 0x35	; 53
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e3       	ldi	r30, 0x35	; 53
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_u8SetPinValue+0x1b0>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_u8SetPinValue+0x1ac>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	3e c0       	rjmp	.+124    	; 0x1018 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
     f9c:	19 82       	std	Y+1, r1	; 0x01
     f9e:	3c c0       	rjmp	.+120    	; 0x1018 <DIO_u8SetPinValue+0x238>
				}		
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PinValue)
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	3e 83       	std	Y+6, r19	; 0x06
     fa8:	2d 83       	std	Y+5, r18	; 0x05
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	9e 81       	ldd	r25, Y+6	; 0x06
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	c9 f0       	breq	.+50     	; 0xfe4 <DIO_u8SetPinValue+0x204>
     fb2:	2d 81       	ldd	r18, Y+5	; 0x05
     fb4:	3e 81       	ldd	r19, Y+6	; 0x06
     fb6:	21 30       	cpi	r18, 0x01	; 1
     fb8:	31 05       	cpc	r19, r1
     fba:	49 f5       	brne	.+82     	; 0x100e <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     fbc:	a2 e3       	ldi	r26, 0x32	; 50
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e2 e3       	ldi	r30, 0x32	; 50
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_u8SetPinValue+0x1fa>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_u8SetPinValue+0x1f6>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	1a c0       	rjmp	.+52     	; 0x1018 <DIO_u8SetPinValue+0x238>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     fe4:	a2 e3       	ldi	r26, 0x32	; 50
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e2 e3       	ldi	r30, 0x32	; 50
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8b 81       	ldd	r24, Y+3	; 0x03
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_u8SetPinValue+0x222>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_u8SetPinValue+0x21e>
    1006:	80 95       	com	r24
    1008:	84 23       	and	r24, r20
    100a:	8c 93       	st	X, r24
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <DIO_u8SetPinValue+0x238>
					default : Local_u8ErrorState = STD_TYPES_NOK;
    100e:	19 82       	std	Y+1, r1	; 0x01
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <DIO_u8SetPinValue+0x238>
				}		
			break;
			default :
				Local_u8ErrorState = STD_TYPES_NOK;
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <DIO_u8SetPinValue+0x238>
		}
			
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
}
    101a:	2e 96       	adiw	r28, 0x0e	; 14
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_u8GetPinValue>:

u8  DIO_u8GetPinValue     (u8 Copy_u8PortId, u8 Copy_u8PinId ,u8 * Copy_pu8ReturnedPinValue)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	28 97       	sbiw	r28, 0x08	; 8
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	cd bf       	out	0x3d, r28	; 61
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	6c 83       	std	Y+4, r22	; 0x04
    1044:	5e 83       	std	Y+6, r21	; 0x06
    1046:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	84 30       	cpi	r24, 0x04	; 4
    1050:	08 f0       	brcs	.+2      	; 0x1054 <DIO_u8GetPinValue+0x28>
    1052:	9f c0       	rjmp	.+318    	; 0x1192 <DIO_u8GetPinValue+0x166>
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	88 30       	cpi	r24, 0x08	; 8
    1058:	08 f0       	brcs	.+2      	; 0x105c <DIO_u8GetPinValue+0x30>
    105a:	9b c0       	rjmp	.+310    	; 0x1192 <DIO_u8GetPinValue+0x166>
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	09 f4       	brne	.+2      	; 0x1066 <DIO_u8GetPinValue+0x3a>
    1064:	96 c0       	rjmp	.+300    	; 0x1192 <DIO_u8GetPinValue+0x166>
	{
		switch (Copy_u8PortId)
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	38 87       	std	Y+8, r19	; 0x08
    106e:	2f 83       	std	Y+7, r18	; 0x07
    1070:	4f 81       	ldd	r20, Y+7	; 0x07
    1072:	58 85       	ldd	r21, Y+8	; 0x08
    1074:	41 30       	cpi	r20, 0x01	; 1
    1076:	51 05       	cpc	r21, r1
    1078:	a9 f1       	breq	.+106    	; 0x10e4 <DIO_u8GetPinValue+0xb8>
    107a:	8f 81       	ldd	r24, Y+7	; 0x07
    107c:	98 85       	ldd	r25, Y+8	; 0x08
    107e:	82 30       	cpi	r24, 0x02	; 2
    1080:	91 05       	cpc	r25, r1
    1082:	34 f4       	brge	.+12     	; 0x1090 <DIO_u8GetPinValue+0x64>
    1084:	2f 81       	ldd	r18, Y+7	; 0x07
    1086:	38 85       	ldd	r19, Y+8	; 0x08
    1088:	21 15       	cp	r18, r1
    108a:	31 05       	cpc	r19, r1
    108c:	71 f0       	breq	.+28     	; 0x10aa <DIO_u8GetPinValue+0x7e>
    108e:	82 c0       	rjmp	.+260    	; 0x1194 <DIO_u8GetPinValue+0x168>
    1090:	4f 81       	ldd	r20, Y+7	; 0x07
    1092:	58 85       	ldd	r21, Y+8	; 0x08
    1094:	42 30       	cpi	r20, 0x02	; 2
    1096:	51 05       	cpc	r21, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <DIO_u8GetPinValue+0x70>
    109a:	41 c0       	rjmp	.+130    	; 0x111e <DIO_u8GetPinValue+0xf2>
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	83 30       	cpi	r24, 0x03	; 3
    10a2:	91 05       	cpc	r25, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <DIO_u8GetPinValue+0x7c>
    10a6:	58 c0       	rjmp	.+176    	; 0x1158 <DIO_u8GetPinValue+0x12c>
    10a8:	75 c0       	rjmp	.+234    	; 0x1194 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA:
				Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    10aa:	e9 e3       	ldi	r30, 0x39	; 57
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a9 01       	movw	r20, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_u8GetPinValue+0x96>
    10be:	55 95       	asr	r21
    10c0:	47 95       	ror	r20
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_u8GetPinValue+0x92>
    10c6:	ca 01       	movw	r24, r20
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	88 23       	and	r24, r24
    10d0:	21 f4       	brne	.+8      	; 0x10da <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    10d2:	ed 81       	ldd	r30, Y+5	; 0x05
    10d4:	fe 81       	ldd	r31, Y+6	; 0x06
    10d6:	10 82       	st	Z, r1
    10d8:	5d c0       	rjmp	.+186    	; 0x1194 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    10da:	ed 81       	ldd	r30, Y+5	; 0x05
    10dc:	fe 81       	ldd	r31, Y+6	; 0x06
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 83       	st	Z, r24
    10e2:	58 c0       	rjmp	.+176    	; 0x1194 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTB:
				Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    10e4:	e6 e3       	ldi	r30, 0x36	; 54
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	a9 01       	movw	r20, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_u8GetPinValue+0xd0>
    10f8:	55 95       	asr	r21
    10fa:	47 95       	ror	r20
    10fc:	8a 95       	dec	r24
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_u8GetPinValue+0xcc>
    1100:	ca 01       	movw	r24, r20
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	88 23       	and	r24, r24
    110a:	21 f4       	brne	.+8      	; 0x1114 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    110c:	ed 81       	ldd	r30, Y+5	; 0x05
    110e:	fe 81       	ldd	r31, Y+6	; 0x06
    1110:	10 82       	st	Z, r1
    1112:	40 c0       	rjmp	.+128    	; 0x1194 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1114:	ed 81       	ldd	r30, Y+5	; 0x05
    1116:	fe 81       	ldd	r31, Y+6	; 0x06
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 83       	st	Z, r24
    111c:	3b c0       	rjmp	.+118    	; 0x1194 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTC:
				Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    111e:	e3 e3       	ldi	r30, 0x33	; 51
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	8c 81       	ldd	r24, Y+4	; 0x04
    112a:	88 2f       	mov	r24, r24
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_u8GetPinValue+0x10a>
    1132:	55 95       	asr	r21
    1134:	47 95       	ror	r20
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_u8GetPinValue+0x106>
    113a:	ca 01       	movw	r24, r20
    113c:	81 70       	andi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	88 23       	and	r24, r24
    1144:	21 f4       	brne	.+8      	; 0x114e <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1146:	ed 81       	ldd	r30, Y+5	; 0x05
    1148:	fe 81       	ldd	r31, Y+6	; 0x06
    114a:	10 82       	st	Z, r1
    114c:	23 c0       	rjmp	.+70     	; 0x1194 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    114e:	ed 81       	ldd	r30, Y+5	; 0x05
    1150:	fe 81       	ldd	r31, Y+6	; 0x06
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	80 83       	st	Z, r24
    1156:	1e c0       	rjmp	.+60     	; 0x1194 <DIO_u8GetPinValue+0x168>
				}
			break;
			case DIO_u8_PORTD:
				Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1158:	e0 e3       	ldi	r30, 0x30	; 48
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a9 01       	movw	r20, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_u8GetPinValue+0x144>
    116c:	55 95       	asr	r21
    116e:	47 95       	ror	r20
    1170:	8a 95       	dec	r24
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_u8GetPinValue+0x140>
    1174:	ca 01       	movw	r24, r20
    1176:	81 70       	andi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	88 23       	and	r24, r24
    117e:	21 f4       	brne	.+8      	; 0x1188 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1180:	ed 81       	ldd	r30, Y+5	; 0x05
    1182:	fe 81       	ldd	r31, Y+6	; 0x06
    1184:	10 82       	st	Z, r1
    1186:	06 c0       	rjmp	.+12     	; 0x1194 <DIO_u8GetPinValue+0x168>
				}	
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1188:	ed 81       	ldd	r30, Y+5	; 0x05
    118a:	fe 81       	ldd	r31, Y+6	; 0x06
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 83       	st	Z, r24
    1190:	01 c0       	rjmp	.+2      	; 0x1194 <DIO_u8GetPinValue+0x168>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1192:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1196:	28 96       	adiw	r28, 0x08	; 8
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	cf 91       	pop	r28
    11a4:	df 91       	pop	r29
    11a6:	08 95       	ret

000011a8 <DIO_u8SetPortDirection>:

u8  DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	2d 97       	sbiw	r28, 0x0d	; 13
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	8a 83       	std	Y+2, r24	; 0x02
    11be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT))
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <DIO_u8SetPortDirection+0x2a>
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	88 23       	and	r24, r24
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <DIO_u8SetPortDirection+0x2a>
    11d0:	7f c0       	rjmp	.+254    	; 0x12d0 <DIO_u8SetPortDirection+0x128>
	{
		switch (Copy_u8PortId)
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3d 87       	std	Y+13, r19	; 0x0d
    11da:	2c 87       	std	Y+12, r18	; 0x0c
    11dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11de:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	71 f1       	breq	.+92     	; 0x1242 <DIO_u8SetPortDirection+0x9a>
    11e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	2c f4       	brge	.+10     	; 0x11fa <DIO_u8SetPortDirection+0x52>
    11f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	69 f0       	breq	.+26     	; 0x1212 <DIO_u8SetPortDirection+0x6a>
    11f8:	69 c0       	rjmp	.+210    	; 0x12cc <DIO_u8SetPortDirection+0x124>
    11fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    11fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	b1 f1       	breq	.+108    	; 0x1270 <DIO_u8SetPortDirection+0xc8>
    1204:	8c 85       	ldd	r24, Y+12	; 0x0c
    1206:	9d 85       	ldd	r25, Y+13	; 0x0d
    1208:	83 30       	cpi	r24, 0x03	; 3
    120a:	91 05       	cpc	r25, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <DIO_u8SetPortDirection+0x68>
    120e:	47 c0       	rjmp	.+142    	; 0x129e <DIO_u8SetPortDirection+0xf6>
    1210:	5d c0       	rjmp	.+186    	; 0x12cc <DIO_u8SetPortDirection+0x124>
		{
			case DIO_u8_PORTA:
				switch (Copy_u8PortDirection)
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	3b 87       	std	Y+11, r19	; 0x0b
    121a:	2a 87       	std	Y+10, r18	; 0x0a
    121c:	8a 85       	ldd	r24, Y+10	; 0x0a
    121e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	59 f0       	breq	.+22     	; 0x123a <DIO_u8SetPortDirection+0x92>
    1224:	2a 85       	ldd	r18, Y+10	; 0x0a
    1226:	3b 85       	ldd	r19, Y+11	; 0x0b
    1228:	21 30       	cpi	r18, 0x01	; 1
    122a:	31 05       	cpc	r19, r1
    122c:	09 f0       	breq	.+2      	; 0x1230 <DIO_u8SetPortDirection+0x88>
    122e:	51 c0       	rjmp	.+162    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    1230:	ea e3       	ldi	r30, 0x3A	; 58
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	80 83       	st	Z, r24
    1238:	4c c0       	rjmp	.+152    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    123a:	ea e3       	ldi	r30, 0x3A	; 58
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	10 82       	st	Z, r1
    1240:	48 c0       	rjmp	.+144    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTB:
				switch (Copy_u8PortDirection)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	39 87       	std	Y+9, r19	; 0x09
    124a:	28 87       	std	Y+8, r18	; 0x08
    124c:	88 85       	ldd	r24, Y+8	; 0x08
    124e:	99 85       	ldd	r25, Y+9	; 0x09
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	51 f0       	breq	.+20     	; 0x1268 <DIO_u8SetPortDirection+0xc0>
    1254:	28 85       	ldd	r18, Y+8	; 0x08
    1256:	39 85       	ldd	r19, Y+9	; 0x09
    1258:	21 30       	cpi	r18, 0x01	; 1
    125a:	31 05       	cpc	r19, r1
    125c:	d1 f5       	brne	.+116    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    125e:	e7 e3       	ldi	r30, 0x37	; 55
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	80 83       	st	Z, r24
    1266:	35 c0       	rjmp	.+106    	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	10 82       	st	Z, r1
    126e:	31 c0       	rjmp	.+98     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTC:
				switch (Copy_u8PortDirection)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	3f 83       	std	Y+7, r19	; 0x07
    1278:	2e 83       	std	Y+6, r18	; 0x06
    127a:	8e 81       	ldd	r24, Y+6	; 0x06
    127c:	9f 81       	ldd	r25, Y+7	; 0x07
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	51 f0       	breq	.+20     	; 0x1296 <DIO_u8SetPortDirection+0xee>
    1282:	2e 81       	ldd	r18, Y+6	; 0x06
    1284:	3f 81       	ldd	r19, Y+7	; 0x07
    1286:	21 30       	cpi	r18, 0x01	; 1
    1288:	31 05       	cpc	r19, r1
    128a:	19 f5       	brne	.+70     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    128c:	e4 e3       	ldi	r30, 0x34	; 52
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	80 83       	st	Z, r24
    1294:	1e c0       	rjmp	.+60     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	10 82       	st	Z, r1
    129c:	1a c0       	rjmp	.+52     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			case DIO_u8_PORTD:
				switch (Copy_u8PortDirection)
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 83       	std	Y+5, r19	; 0x05
    12a6:	2c 83       	std	Y+4, r18	; 0x04
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	51 f0       	breq	.+20     	; 0x12c4 <DIO_u8SetPortDirection+0x11c>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	21 30       	cpi	r18, 0x01	; 1
    12b6:	31 05       	cpc	r19, r1
    12b8:	61 f4       	brne	.+24     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				{
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    12ba:	e1 e3       	ldi	r30, 0x31	; 49
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	80 83       	st	Z, r24
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
					case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    12c4:	e1 e3       	ldi	r30, 0x31	; 49
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	10 82       	st	Z, r1
    12ca:	03 c0       	rjmp	.+6      	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
				}
			break;
			default :Local_u8ErrorState = STD_TYPES_NOK;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <DIO_u8SetPortDirection+0x12a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12d0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d4:	2d 96       	adiw	r28, 0x0d	; 13
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <DIO_u8SetPortValue>:

u8  DIO_u8SetPortValue    (u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <DIO_u8SetPortValue+0x6>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <DIO_u8SetPortValue+0x8>
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	3d 83       	std	Y+5, r19	; 0x05
    1304:	2c 83       	std	Y+4, r18	; 0x04
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	d1 f0       	breq	.+52     	; 0x1344 <DIO_u8SetPortValue+0x5e>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	2c f4       	brge	.+10     	; 0x1324 <DIO_u8SetPortValue+0x3e>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	61 f0       	breq	.+24     	; 0x133a <DIO_u8SetPortValue+0x54>
    1322:	1f c0       	rjmp	.+62     	; 0x1362 <DIO_u8SetPortValue+0x7c>
    1324:	2c 81       	ldd	r18, Y+4	; 0x04
    1326:	3d 81       	ldd	r19, Y+5	; 0x05
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	81 f0       	breq	.+32     	; 0x134e <DIO_u8SetPortValue+0x68>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	91 05       	cpc	r25, r1
    1336:	81 f0       	breq	.+32     	; 0x1358 <DIO_u8SetPortValue+0x72>
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	80 83       	st	Z, r24
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    1344:	e8 e3       	ldi	r30, 0x38	; 56
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	80 83       	st	Z, r24
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    134e:	e5 e3       	ldi	r30, 0x35	; 53
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	80 83       	st	Z, r24
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    1358:	e2 e3       	ldi	r30, 0x32	; 50
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	80 83       	st	Z, r24
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    1362:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <DIO_u8GetPortValue>:

u8  DIO_u8GetPortValue    (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_u8GetPortValue+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <DIO_u8GetPortValue+0x8>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <DIO_u8GetPortValue+0xa>
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	7c 83       	std	Y+4, r23	; 0x04
    1388:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_pu8ReturnedPortValue != NULL)
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	e9 f1       	breq	.+122    	; 0x1410 <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	3e 83       	std	Y+6, r19	; 0x06
    139e:	2d 83       	std	Y+5, r18	; 0x05
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	91 05       	cpc	r25, r1
    13a8:	e1 f0       	breq	.+56     	; 0x13e2 <DIO_u8GetPortValue+0x6c>
    13aa:	2d 81       	ldd	r18, Y+5	; 0x05
    13ac:	3e 81       	ldd	r19, Y+6	; 0x06
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	2c f4       	brge	.+10     	; 0x13be <DIO_u8GetPortValue+0x48>
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <DIO_u8GetPortValue+0x5e>
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <DIO_u8GetPortValue+0x96>
    13be:	2d 81       	ldd	r18, Y+5	; 0x05
    13c0:	3e 81       	ldd	r19, Y+6	; 0x06
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	a1 f0       	breq	.+40     	; 0x13f0 <DIO_u8GetPortValue+0x7a>
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	91 05       	cpc	r25, r1
    13d0:	b1 f0       	breq	.+44     	; 0x13fe <DIO_u8GetPortValue+0x88>
    13d2:	1c c0       	rjmp	.+56     	; 0x140c <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    13d4:	e9 e3       	ldi	r30, 0x39	; 57
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	eb 81       	ldd	r30, Y+3	; 0x03
    13dc:	fc 81       	ldd	r31, Y+4	; 0x04
    13de:	80 83       	st	Z, r24
    13e0:	18 c0       	rjmp	.+48     	; 0x1412 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    13e2:	e6 e3       	ldi	r30, 0x36	; 54
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ea:	fc 81       	ldd	r31, Y+4	; 0x04
    13ec:	80 83       	st	Z, r24
    13ee:	11 c0       	rjmp	.+34     	; 0x1412 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    13f0:	e3 e3       	ldi	r30, 0x33	; 51
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	eb 81       	ldd	r30, Y+3	; 0x03
    13f8:	fc 81       	ldd	r31, Y+4	; 0x04
    13fa:	80 83       	st	Z, r24
    13fc:	0a c0       	rjmp	.+20     	; 0x1412 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    13fe:	e0 e3       	ldi	r30, 0x30	; 48
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	eb 81       	ldd	r30, Y+3	; 0x03
    1406:	fc 81       	ldd	r31, Y+4	; 0x04
    1408:	80 83       	st	Z, r24
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <DIO_u8GetPortValue+0x9c>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    140c:	19 82       	std	Y+1, r1	; 0x01
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1410:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	26 96       	adiw	r28, 0x06	; 6
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	65 97       	sbiw	r28, 0x15	; 21
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	9d 8b       	std	Y+21, r25	; 0x15
    143c:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    1442:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedKey != NULL)
    1444:	8c 89       	ldd	r24, Y+20	; 0x14
    1446:	9d 89       	ldd	r25, Y+21	; 0x15
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	09 f4       	brne	.+2      	; 0x144e <KPD_u8GetKeyState+0x28>
    144c:	f0 c0       	rjmp	.+480    	; 0x162e <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    144e:	ec 89       	ldd	r30, Y+20	; 0x14
    1450:	fd 89       	ldd	r31, Y+21	; 0x15
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    1456:	19 8a       	std	Y+17, r1	; 0x11
    1458:	e5 c0       	rjmp	.+458    	; 0x1624 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    145a:	89 89       	ldd	r24, Y+17	; 0x11
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	fc 01       	movw	r30, r24
    1462:	e8 58       	subi	r30, 0x88	; 136
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	90 81       	ld	r25, Z
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	69 2f       	mov	r22, r25
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    1472:	18 8a       	std	Y+16, r1	; 0x10
    1474:	c1 c0       	rjmp	.+386    	; 0x15f8 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1476:	88 89       	ldd	r24, Y+16	; 0x10
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	fc 01       	movw	r30, r24
    147e:	e4 58       	subi	r30, 0x84	; 132
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	90 81       	ld	r25, Z
    1484:	9e 01       	movw	r18, r28
    1486:	2d 5e       	subi	r18, 0xED	; 237
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	69 2f       	mov	r22, r25
    148e:	a9 01       	movw	r20, r18
    1490:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)/* Switch is Pressed */
    1494:	8b 89       	ldd	r24, Y+19	; 0x13
    1496:	88 23       	and	r24, r24
    1498:	09 f0       	breq	.+2      	; 0x149c <KPD_u8GetKeyState+0x76>
    149a:	ab c0       	rjmp	.+342    	; 0x15f2 <KPD_u8GetKeyState+0x1cc>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 ea       	ldi	r26, 0xA0	; 160
    14a2:	b1 e4       	ldi	r27, 0x41	; 65
    14a4:	8b 87       	std	Y+11, r24	; 0x0b
    14a6:	9c 87       	std	Y+12, r25	; 0x0c
    14a8:	ad 87       	std	Y+13, r26	; 0x0d
    14aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a ef       	ldi	r20, 0xFA	; 250
    14ba:	54 e4       	ldi	r21, 0x44	; 68
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8f 83       	std	Y+7, r24	; 0x07
    14c6:	98 87       	std	Y+8, r25	; 0x08
    14c8:	a9 87       	std	Y+9, r26	; 0x09
    14ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	78 85       	ldd	r23, Y+8	; 0x08
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	6b 85       	ldd	r22, Y+11	; 0x0b
    1508:	7c 85       	ldd	r23, Y+12	; 0x0c
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	0f c0       	rjmp	.+30     	; 0x154e <KPD_u8GetKeyState+0x128>
    1530:	88 ec       	ldi	r24, 0xC8	; 200
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <KPD_u8GetKeyState+0x116>
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <KPD_u8GetKeyState+0x10a>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <KPD_u8GetKeyState+0x152>
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1580:	88 89       	ldd	r24, Y+16	; 0x10
    1582:	88 2f       	mov	r24, r24
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	fc 01       	movw	r30, r24
    1588:	e4 58       	subi	r30, 0x84	; 132
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	90 81       	ld	r25, Z
    158e:	9e 01       	movw	r18, r28
    1590:	2d 5e       	subi	r18, 0xED	; 237
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	69 2f       	mov	r22, r25
    1598:	a9 01       	movw	r20, r18
    159a:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_u8GetPinValue>
    159e:	0f c0       	rjmp	.+30     	; 0x15be <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    15a0:	88 89       	ldd	r24, Y+16	; 0x10
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	fc 01       	movw	r30, r24
    15a8:	e4 58       	subi	r30, 0x84	; 132
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	90 81       	ld	r25, Z
    15ae:	9e 01       	movw	r18, r28
    15b0:	2d 5e       	subi	r18, 0xED	; 237
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	69 2f       	mov	r22, r25
    15b8:	a9 01       	movw	r20, r18
    15ba:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    15be:	8b 89       	ldd	r24, Y+19	; 0x13
    15c0:	88 23       	and	r24, r24
    15c2:	71 f3       	breq	.-36     	; 0x15a0 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    15c4:	89 89       	ldd	r24, Y+17	; 0x11
    15c6:	48 2f       	mov	r20, r24
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	88 89       	ldd	r24, Y+16	; 0x10
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	ca 01       	movw	r24, r20
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	fc 01       	movw	r30, r24
    15e0:	e8 59       	subi	r30, 0x98	; 152
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	ec 89       	ldd	r30, Y+20	; 0x14
    15e8:	fd 89       	ldd	r31, Y+21	; 0x15
    15ea:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	8f 87       	std	Y+15, r24	; 0x0f
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    15f2:	88 89       	ldd	r24, Y+16	; 0x10
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	88 8b       	std	Y+16, r24	; 0x10
    15f8:	88 89       	ldd	r24, Y+16	; 0x10
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	08 f4       	brcc	.+2      	; 0x1600 <KPD_u8GetKeyState+0x1da>
    15fe:	3b cf       	rjmp	.-394    	; 0x1476 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;						
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    1600:	89 89       	ldd	r24, Y+17	; 0x11
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	fc 01       	movw	r30, r24
    1608:	e8 58       	subi	r30, 0x88	; 136
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	90 81       	ld	r25, Z
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	69 2f       	mov	r22, r25
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    1618:	8f 85       	ldd	r24, Y+15	; 0x0f
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	49 f0       	breq	.+18     	; 0x1630 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    161e:	89 89       	ldd	r24, Y+17	; 0x11
    1620:	8f 5f       	subi	r24, 0xFF	; 255
    1622:	89 8b       	std	Y+17, r24	; 0x11
    1624:	89 89       	ldd	r24, Y+17	; 0x11
    1626:	84 30       	cpi	r24, 0x04	; 4
    1628:	08 f4       	brcc	.+2      	; 0x162c <KPD_u8GetKeyState+0x206>
    162a:	17 cf       	rjmp	.-466    	; 0x145a <KPD_u8GetKeyState+0x34>
    162c:	01 c0       	rjmp	.+2      	; 0x1630 <KPD_u8GetKeyState+0x20a>
			}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    162e:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    1630:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1632:	65 96       	adiw	r28, 0x15	; 21
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <LCD_voidInit>:
/***************************************************************************************/
/* Description! Apply initialization sequence for LCD module                           */
/* Input      ! Nothing                                                                */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidInit(void) {
    1644:	0f 93       	push	r16
    1646:	1f 93       	push	r17
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	c4 55       	subi	r28, 0x54	; 84
    1652:	d0 40       	sbci	r29, 0x00	; 0
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	fe 01       	movw	r30, r28
    1660:	ef 5a       	subi	r30, 0xAF	; 175
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	ac e0       	ldi	r26, 0x0C	; 12
    166a:	b2 e4       	ldi	r27, 0x42	; 66
    166c:	80 83       	st	Z, r24
    166e:	91 83       	std	Z+1, r25	; 0x01
    1670:	a2 83       	std	Z+2, r26	; 0x02
    1672:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1674:	8e 01       	movw	r16, r28
    1676:	03 5b       	subi	r16, 0xB3	; 179
    1678:	1f 4f       	sbci	r17, 0xFF	; 255
    167a:	fe 01       	movw	r30, r28
    167c:	ef 5a       	subi	r30, 0xAF	; 175
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	82 81       	ldd	r24, Z+2	; 0x02
    1686:	93 81       	ldd	r25, Z+3	; 0x03
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4a ef       	ldi	r20, 0xFA	; 250
    168e:	54 e4       	ldi	r21, 0x44	; 68
    1690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	f8 01       	movw	r30, r16
    169a:	80 83       	st	Z, r24
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	a2 83       	std	Z+2, r26	; 0x02
    16a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16a2:	fe 01       	movw	r30, r28
    16a4:	e3 5b       	subi	r30, 0xB3	; 179
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	60 81       	ld	r22, Z
    16aa:	71 81       	ldd	r23, Z+1	; 0x01
    16ac:	82 81       	ldd	r24, Z+2	; 0x02
    16ae:	93 81       	ldd	r25, Z+3	; 0x03
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	44 f4       	brge	.+16     	; 0x16d0 <LCD_voidInit+0x8c>
		__ticks = 1;
    16c0:	fe 01       	movw	r30, r28
    16c2:	e5 5b       	subi	r30, 0xB5	; 181
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
    16ce:	64 c0       	rjmp	.+200    	; 0x1798 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    16d0:	fe 01       	movw	r30, r28
    16d2:	e3 5b       	subi	r30, 0xB3	; 179
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	82 81       	ldd	r24, Z+2	; 0x02
    16dc:	93 81       	ldd	r25, Z+3	; 0x03
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	0c f0       	brlt	.+2      	; 0x16f0 <LCD_voidInit+0xac>
    16ee:	43 c0       	rjmp	.+134    	; 0x1776 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f0:	fe 01       	movw	r30, r28
    16f2:	ef 5a       	subi	r30, 0xAF	; 175
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	60 81       	ld	r22, Z
    16f8:	71 81       	ldd	r23, Z+1	; 0x01
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e2       	ldi	r20, 0x20	; 32
    1704:	51 e4       	ldi	r21, 0x41	; 65
    1706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	8e 01       	movw	r16, r28
    1710:	05 5b       	subi	r16, 0xB5	; 181
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	f8 01       	movw	r30, r16
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
    1726:	1f c0       	rjmp	.+62     	; 0x1766 <LCD_voidInit+0x122>
    1728:	fe 01       	movw	r30, r28
    172a:	e7 5b       	subi	r30, 0xB7	; 183
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	88 ec       	ldi	r24, 0xC8	; 200
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	80 83       	st	Z, r24
    1736:	fe 01       	movw	r30, r28
    1738:	e7 5b       	subi	r30, 0xB7	; 183
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <LCD_voidInit+0xfc>
    1744:	fe 01       	movw	r30, r28
    1746:	e7 5b       	subi	r30, 0xB7	; 183
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174e:	de 01       	movw	r26, r28
    1750:	a5 5b       	subi	r26, 0xB5	; 181
    1752:	bf 4f       	sbci	r27, 0xFF	; 255
    1754:	fe 01       	movw	r30, r28
    1756:	e5 5b       	subi	r30, 0xB5	; 181
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	91 81       	ldd	r25, Z+1	; 0x01
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	11 96       	adiw	r26, 0x01	; 1
    1762:	9c 93       	st	X, r25
    1764:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1766:	fe 01       	movw	r30, r28
    1768:	e5 5b       	subi	r30, 0xB5	; 181
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	d1 f6       	brne	.-76     	; 0x1728 <LCD_voidInit+0xe4>
    1774:	27 c0       	rjmp	.+78     	; 0x17c4 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	8e 01       	movw	r16, r28
    1778:	05 5b       	subi	r16, 0xB5	; 181
    177a:	1f 4f       	sbci	r17, 0xFF	; 255
    177c:	fe 01       	movw	r30, r28
    177e:	e3 5b       	subi	r30, 0xB3	; 179
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	f8 01       	movw	r30, r16
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	de 01       	movw	r26, r28
    179a:	a9 5b       	subi	r26, 0xB9	; 185
    179c:	bf 4f       	sbci	r27, 0xFF	; 255
    179e:	fe 01       	movw	r30, r28
    17a0:	e5 5b       	subi	r30, 0xB5	; 181
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	91 81       	ldd	r25, Z+1	; 0x01
    17a8:	8d 93       	st	X+, r24
    17aa:	9c 93       	st	X, r25
    17ac:	fe 01       	movw	r30, r28
    17ae:	e9 5b       	subi	r30, 0xB9	; 185
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	91 81       	ldd	r25, Z+1	; 0x01
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <LCD_voidInit+0x172>
    17ba:	fe 01       	movw	r30, r28
    17bc:	e9 5b       	subi	r30, 0xB9	; 185
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Delay 30ms to ensure the initialization of the LCD driver */
		_delay_ms(35);

		/* Return Home  */
		LCD_voidSendCmnd(lcd_Home);
    17c4:	82 e0       	ldi	r24, 0x02	; 2
    17c6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
    17ca:	fe 01       	movw	r30, r28
    17cc:	ed 5b       	subi	r30, 0xBD	; 189
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e8       	ldi	r26, 0x80	; 128
    17d6:	bf e3       	ldi	r27, 0x3F	; 63
    17d8:	80 83       	st	Z, r24
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	a2 83       	std	Z+2, r26	; 0x02
    17de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e0:	8e 01       	movw	r16, r28
    17e2:	01 5c       	subi	r16, 0xC1	; 193
    17e4:	1f 4f       	sbci	r17, 0xFF	; 255
    17e6:	fe 01       	movw	r30, r28
    17e8:	ed 5b       	subi	r30, 0xBD	; 189
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	82 81       	ldd	r24, Z+2	; 0x02
    17f2:	93 81       	ldd	r25, Z+3	; 0x03
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	f8 01       	movw	r30, r16
    1806:	80 83       	st	Z, r24
    1808:	91 83       	std	Z+1, r25	; 0x01
    180a:	a2 83       	std	Z+2, r26	; 0x02
    180c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    180e:	fe 01       	movw	r30, r28
    1810:	ff 96       	adiw	r30, 0x3f	; 63
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	40 e8       	ldi	r20, 0x80	; 128
    1820:	5f e3       	ldi	r21, 0x3F	; 63
    1822:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1826:	88 23       	and	r24, r24
    1828:	2c f4       	brge	.+10     	; 0x1834 <LCD_voidInit+0x1f0>
		__ticks = 1;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	9e af       	std	Y+62, r25	; 0x3e
    1830:	8d af       	std	Y+61, r24	; 0x3d
    1832:	46 c0       	rjmp	.+140    	; 0x18c0 <LCD_voidInit+0x27c>
	else if (__tmp > 65535)
    1834:	fe 01       	movw	r30, r28
    1836:	ff 96       	adiw	r30, 0x3f	; 63
    1838:	60 81       	ld	r22, Z
    183a:	71 81       	ldd	r23, Z+1	; 0x01
    183c:	82 81       	ldd	r24, Z+2	; 0x02
    183e:	93 81       	ldd	r25, Z+3	; 0x03
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	3f ef       	ldi	r19, 0xFF	; 255
    1844:	4f e7       	ldi	r20, 0x7F	; 127
    1846:	57 e4       	ldi	r21, 0x47	; 71
    1848:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    184c:	18 16       	cp	r1, r24
    184e:	64 f5       	brge	.+88     	; 0x18a8 <LCD_voidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1850:	fe 01       	movw	r30, r28
    1852:	ed 5b       	subi	r30, 0xBD	; 189
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	51 e4       	ldi	r21, 0x41	; 65
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9e af       	std	Y+62, r25	; 0x3e
    187c:	8d af       	std	Y+61, r24	; 0x3d
    187e:	0f c0       	rjmp	.+30     	; 0x189e <LCD_voidInit+0x25a>
    1880:	88 ec       	ldi	r24, 0xC8	; 200
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9c af       	std	Y+60, r25	; 0x3c
    1886:	8b af       	std	Y+59, r24	; 0x3b
    1888:	8b ad       	ldd	r24, Y+59	; 0x3b
    188a:	9c ad       	ldd	r25, Y+60	; 0x3c
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <LCD_voidInit+0x248>
    1890:	9c af       	std	Y+60, r25	; 0x3c
    1892:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1894:	8d ad       	ldd	r24, Y+61	; 0x3d
    1896:	9e ad       	ldd	r25, Y+62	; 0x3e
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	9e af       	std	Y+62, r25	; 0x3e
    189c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189e:	8d ad       	ldd	r24, Y+61	; 0x3d
    18a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	69 f7       	brne	.-38     	; 0x1880 <LCD_voidInit+0x23c>
    18a6:	16 c0       	rjmp	.+44     	; 0x18d4 <LCD_voidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a8:	fe 01       	movw	r30, r28
    18aa:	ff 96       	adiw	r30, 0x3f	; 63
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9e af       	std	Y+62, r25	; 0x3e
    18be:	8d af       	std	Y+61, r24	; 0x3d
    18c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18c4:	9a af       	std	Y+58, r25	; 0x3a
    18c6:	89 af       	std	Y+57, r24	; 0x39
    18c8:	89 ad       	ldd	r24, Y+57	; 0x39
    18ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_voidInit+0x288>
    18d0:	9a af       	std	Y+58, r25	; 0x3a
    18d2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		/* Function Set  */
		LCD_voidSendCmnd(lcd_FunctionSet4bit);
    18d4:	82 e2       	ldi	r24, 0x22	; 34
    18d6:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e8       	ldi	r26, 0x80	; 128
    18e0:	bf e3       	ldi	r27, 0x3F	; 63
    18e2:	8d ab       	std	Y+53, r24	; 0x35
    18e4:	9e ab       	std	Y+54, r25	; 0x36
    18e6:	af ab       	std	Y+55, r26	; 0x37
    18e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ea:	6d a9       	ldd	r22, Y+53	; 0x35
    18ec:	7e a9       	ldd	r23, Y+54	; 0x36
    18ee:	8f a9       	ldd	r24, Y+55	; 0x37
    18f0:	98 ad       	ldd	r25, Y+56	; 0x38
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4a ef       	ldi	r20, 0xFA	; 250
    18f8:	54 e4       	ldi	r21, 0x44	; 68
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	89 ab       	std	Y+49, r24	; 0x31
    1904:	9a ab       	std	Y+50, r25	; 0x32
    1906:	ab ab       	std	Y+51, r26	; 0x33
    1908:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    190a:	69 a9       	ldd	r22, Y+49	; 0x31
    190c:	7a a9       	ldd	r23, Y+50	; 0x32
    190e:	8b a9       	ldd	r24, Y+51	; 0x33
    1910:	9c a9       	ldd	r25, Y+52	; 0x34
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e8       	ldi	r20, 0x80	; 128
    1918:	5f e3       	ldi	r21, 0x3F	; 63
    191a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    191e:	88 23       	and	r24, r24
    1920:	2c f4       	brge	.+10     	; 0x192c <LCD_voidInit+0x2e8>
		__ticks = 1;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	98 ab       	std	Y+48, r25	; 0x30
    1928:	8f a7       	std	Y+47, r24	; 0x2f
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <LCD_voidInit+0x366>
	else if (__tmp > 65535)
    192c:	69 a9       	ldd	r22, Y+49	; 0x31
    192e:	7a a9       	ldd	r23, Y+50	; 0x32
    1930:	8b a9       	ldd	r24, Y+51	; 0x33
    1932:	9c a9       	ldd	r25, Y+52	; 0x34
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	4f e7       	ldi	r20, 0x7F	; 127
    193a:	57 e4       	ldi	r21, 0x47	; 71
    193c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1940:	18 16       	cp	r1, r24
    1942:	4c f5       	brge	.+82     	; 0x1996 <LCD_voidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1944:	6d a9       	ldd	r22, Y+53	; 0x35
    1946:	7e a9       	ldd	r23, Y+54	; 0x36
    1948:	8f a9       	ldd	r24, Y+55	; 0x37
    194a:	98 ad       	ldd	r25, Y+56	; 0x38
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e2       	ldi	r20, 0x20	; 32
    1952:	51 e4       	ldi	r21, 0x41	; 65
    1954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	98 ab       	std	Y+48, r25	; 0x30
    196a:	8f a7       	std	Y+47, r24	; 0x2f
    196c:	0f c0       	rjmp	.+30     	; 0x198c <LCD_voidInit+0x348>
    196e:	88 ec       	ldi	r24, 0xC8	; 200
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9e a7       	std	Y+46, r25	; 0x2e
    1974:	8d a7       	std	Y+45, r24	; 0x2d
    1976:	8d a5       	ldd	r24, Y+45	; 0x2d
    1978:	9e a5       	ldd	r25, Y+46	; 0x2e
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_voidInit+0x336>
    197e:	9e a7       	std	Y+46, r25	; 0x2e
    1980:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1982:	8f a5       	ldd	r24, Y+47	; 0x2f
    1984:	98 a9       	ldd	r25, Y+48	; 0x30
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	98 ab       	std	Y+48, r25	; 0x30
    198a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    198c:	8f a5       	ldd	r24, Y+47	; 0x2f
    198e:	98 a9       	ldd	r25, Y+48	; 0x30
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	69 f7       	brne	.-38     	; 0x196e <LCD_voidInit+0x32a>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <LCD_voidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1996:	69 a9       	ldd	r22, Y+49	; 0x31
    1998:	7a a9       	ldd	r23, Y+50	; 0x32
    199a:	8b a9       	ldd	r24, Y+51	; 0x33
    199c:	9c a9       	ldd	r25, Y+52	; 0x34
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	98 ab       	std	Y+48, r25	; 0x30
    19a8:	8f a7       	std	Y+47, r24	; 0x2f
    19aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ac:	98 a9       	ldd	r25, Y+48	; 0x30
    19ae:	9c a7       	std	Y+44, r25	; 0x2c
    19b0:	8b a7       	std	Y+43, r24	; 0x2b
    19b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_voidInit+0x372>
    19ba:	9c a7       	std	Y+44, r25	; 0x2c
    19bc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		/* Display ON OFF Control */
		LCD_voidSendCmnd(lcd_DisplayOn);
    19be:	8f e0       	ldi	r24, 0x0F	; 15
    19c0:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	a0 e8       	ldi	r26, 0x80	; 128
    19ca:	bf e3       	ldi	r27, 0x3F	; 63
    19cc:	8f a3       	std	Y+39, r24	; 0x27
    19ce:	98 a7       	std	Y+40, r25	; 0x28
    19d0:	a9 a7       	std	Y+41, r26	; 0x29
    19d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d4:	6f a1       	ldd	r22, Y+39	; 0x27
    19d6:	78 a5       	ldd	r23, Y+40	; 0x28
    19d8:	89 a5       	ldd	r24, Y+41	; 0x29
    19da:	9a a5       	ldd	r25, Y+42	; 0x2a
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	4a ef       	ldi	r20, 0xFA	; 250
    19e2:	54 e4       	ldi	r21, 0x44	; 68
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	8b a3       	std	Y+35, r24	; 0x23
    19ee:	9c a3       	std	Y+36, r25	; 0x24
    19f0:	ad a3       	std	Y+37, r26	; 0x25
    19f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19f4:	6b a1       	ldd	r22, Y+35	; 0x23
    19f6:	7c a1       	ldd	r23, Y+36	; 0x24
    19f8:	8d a1       	ldd	r24, Y+37	; 0x25
    19fa:	9e a1       	ldd	r25, Y+38	; 0x26
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	2c f4       	brge	.+10     	; 0x1a16 <LCD_voidInit+0x3d2>
		__ticks = 1;
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9a a3       	std	Y+34, r25	; 0x22
    1a12:	89 a3       	std	Y+33, r24	; 0x21
    1a14:	3f c0       	rjmp	.+126    	; 0x1a94 <LCD_voidInit+0x450>
	else if (__tmp > 65535)
    1a16:	6b a1       	ldd	r22, Y+35	; 0x23
    1a18:	7c a1       	ldd	r23, Y+36	; 0x24
    1a1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	3f ef       	ldi	r19, 0xFF	; 255
    1a22:	4f e7       	ldi	r20, 0x7F	; 127
    1a24:	57 e4       	ldi	r21, 0x47	; 71
    1a26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2a:	18 16       	cp	r1, r24
    1a2c:	4c f5       	brge	.+82     	; 0x1a80 <LCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a30:	78 a5       	ldd	r23, Y+40	; 0x28
    1a32:	89 a5       	ldd	r24, Y+41	; 0x29
    1a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e2       	ldi	r20, 0x20	; 32
    1a3c:	51 e4       	ldi	r21, 0x41	; 65
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9a a3       	std	Y+34, r25	; 0x22
    1a54:	89 a3       	std	Y+33, r24	; 0x21
    1a56:	0f c0       	rjmp	.+30     	; 0x1a76 <LCD_voidInit+0x432>
    1a58:	88 ec       	ldi	r24, 0xC8	; 200
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	98 a3       	std	Y+32, r25	; 0x20
    1a5e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a62:	98 a1       	ldd	r25, Y+32	; 0x20
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	f1 f7       	brne	.-4      	; 0x1a64 <LCD_voidInit+0x420>
    1a68:	98 a3       	std	Y+32, r25	; 0x20
    1a6a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	9a a3       	std	Y+34, r25	; 0x22
    1a74:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a76:	89 a1       	ldd	r24, Y+33	; 0x21
    1a78:	9a a1       	ldd	r25, Y+34	; 0x22
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	69 f7       	brne	.-38     	; 0x1a58 <LCD_voidInit+0x414>
    1a7e:	14 c0       	rjmp	.+40     	; 0x1aa8 <LCD_voidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a80:	6b a1       	ldd	r22, Y+35	; 0x23
    1a82:	7c a1       	ldd	r23, Y+36	; 0x24
    1a84:	8d a1       	ldd	r24, Y+37	; 0x25
    1a86:	9e a1       	ldd	r25, Y+38	; 0x26
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9a a3       	std	Y+34, r25	; 0x22
    1a92:	89 a3       	std	Y+33, r24	; 0x21
    1a94:	89 a1       	ldd	r24, Y+33	; 0x21
    1a96:	9a a1       	ldd	r25, Y+34	; 0x22
    1a98:	9e 8f       	std	Y+30, r25	; 0x1e
    1a9a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a9c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a9e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <LCD_voidInit+0x45c>
    1aa4:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		/* Clear Display */
		LCD_voidSendCmnd(lcd_Clear);
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a0 e8       	ldi	r26, 0x80	; 128
    1ab4:	bf e3       	ldi	r27, 0x3F	; 63
    1ab6:	89 8f       	std	Y+25, r24	; 0x19
    1ab8:	9a 8f       	std	Y+26, r25	; 0x1a
    1aba:	ab 8f       	std	Y+27, r26	; 0x1b
    1abc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a ef       	ldi	r20, 0xFA	; 250
    1acc:	54 e4       	ldi	r21, 0x44	; 68
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8d 8b       	std	Y+21, r24	; 0x15
    1ad8:	9e 8b       	std	Y+22, r25	; 0x16
    1ada:	af 8b       	std	Y+23, r26	; 0x17
    1adc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ade:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <LCD_voidInit+0x4bc>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <LCD_voidInit+0x53a>
	else if (__tmp > 65535)
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <LCD_voidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <LCD_voidInit+0x51c>
    1b42:	88 ec       	ldi	r24, 0xC8	; 200
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9a 8b       	std	Y+18, r25	; 0x12
    1b48:	89 8b       	std	Y+17, r24	; 0x11
    1b4a:	89 89       	ldd	r24, Y+17	; 0x11
    1b4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_voidInit+0x50a>
    1b52:	9a 8b       	std	Y+18, r25	; 0x12
    1b54:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8b 89       	ldd	r24, Y+19	; 0x13
    1b58:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9c 8b       	std	Y+20, r25	; 0x14
    1b5e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <LCD_voidInit+0x4fe>
    1b68:	14 c0       	rjmp	.+40     	; 0x1b92 <LCD_voidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b70:	98 8d       	ldd	r25, Y+24	; 0x18
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9c 8b       	std	Y+20, r25	; 0x14
    1b7c:	8b 8b       	std	Y+19, r24	; 0x13
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	98 8b       	std	Y+16, r25	; 0x10
    1b84:	8f 87       	std	Y+15, r24	; 0x0f
    1b86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b88:	98 89       	ldd	r25, Y+16	; 0x10
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_voidInit+0x546>
    1b8e:	98 8b       	std	Y+16, r25	; 0x10
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		/* Entry Mode Set  */
		LCD_voidSendCmnd(lcd_EntryMode);
    1b92:	86 e0       	ldi	r24, 0x06	; 6
    1b94:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a0 e0       	ldi	r26, 0x00	; 0
    1b9e:	b0 e4       	ldi	r27, 0x40	; 64
    1ba0:	8b 87       	std	Y+11, r24	; 0x0b
    1ba2:	9c 87       	std	Y+12, r25	; 0x0c
    1ba4:	ad 87       	std	Y+13, r26	; 0x0d
    1ba6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a ef       	ldi	r20, 0xFA	; 250
    1bb6:	54 e4       	ldi	r21, 0x44	; 68
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8f 83       	std	Y+7, r24	; 0x07
    1bc2:	98 87       	std	Y+8, r25	; 0x08
    1bc4:	a9 87       	std	Y+9, r26	; 0x09
    1bc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bca:	78 85       	ldd	r23, Y+8	; 0x08
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	2c f4       	brge	.+10     	; 0x1bea <LCD_voidInit+0x5a6>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	3f c0       	rjmp	.+126    	; 0x1c68 <LCD_voidInit+0x624>
	else if (__tmp > 65535)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	57 e4       	ldi	r21, 0x47	; 71
    1bfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	4c f5       	brge	.+82     	; 0x1c54 <LCD_voidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LCD_voidInit+0x606>
    1c2c:	88 ec       	ldi	r24, 0xC8	; 200
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9c 83       	std	Y+4, r25	; 0x04
    1c32:	8b 83       	std	Y+3, r24	; 0x03
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_voidInit+0x5f4>
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	69 f7       	brne	.-38     	; 0x1c2c <LCD_voidInit+0x5e8>
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <LCD_voidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c54:	6f 81       	ldd	r22, Y+7	; 0x07
    1c56:	78 85       	ldd	r23, Y+8	; 0x08
    1c58:	89 85       	ldd	r24, Y+9	; 0x09
    1c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9e 83       	std	Y+6, r25	; 0x06
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	9a 83       	std	Y+2, r25	; 0x02
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	9a 81       	ldd	r25, Y+2	; 0x02
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_voidInit+0x630>
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
#endif
}
    1c7c:	cc 5a       	subi	r28, 0xAC	; 172
    1c7e:	df 4f       	sbci	r29, 0xFF	; 255
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <LCD_voidSendCmnd>:
/***************************************************************************************/
/* Description! Interface to send the configuration commands to the LCD Driver         */
/* Input      ! Command number                                                         */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendCmnd(u8 Copy_u8Cmnd) {
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	6d 97       	sbiw	r28, 0x1d	; 29
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT

	/* Set RS to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Cmnd);
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cc2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	62 e0       	ldi	r22, 0x02	; 2
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e4       	ldi	r27, 0x40	; 64
    1cd8:	89 8f       	std	Y+25, r24	; 0x19
    1cda:	9a 8f       	std	Y+26, r25	; 0x1a
    1cdc:	ab 8f       	std	Y+27, r26	; 0x1b
    1cde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a ef       	ldi	r20, 0xFA	; 250
    1cee:	54 e4       	ldi	r21, 0x44	; 68
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	8d 8b       	std	Y+21, r24	; 0x15
    1cfa:	9e 8b       	std	Y+22, r25	; 0x16
    1cfc:	af 8b       	std	Y+23, r26	; 0x17
    1cfe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d00:	6d 89       	ldd	r22, Y+21	; 0x15
    1d02:	7e 89       	ldd	r23, Y+22	; 0x16
    1d04:	8f 89       	ldd	r24, Y+23	; 0x17
    1d06:	98 8d       	ldd	r25, Y+24	; 0x18
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e8       	ldi	r20, 0x80	; 128
    1d0e:	5f e3       	ldi	r21, 0x3F	; 63
    1d10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d14:	88 23       	and	r24, r24
    1d16:	2c f4       	brge	.+10     	; 0x1d22 <LCD_voidSendCmnd+0x8e>
		__ticks = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9c 8b       	std	Y+20, r25	; 0x14
    1d1e:	8b 8b       	std	Y+19, r24	; 0x13
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <LCD_voidSendCmnd+0x10c>
	else if (__tmp > 65535)
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	3f ef       	ldi	r19, 0xFF	; 255
    1d2e:	4f e7       	ldi	r20, 0x7F	; 127
    1d30:	57 e4       	ldi	r21, 0x47	; 71
    1d32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d36:	18 16       	cp	r1, r24
    1d38:	4c f5       	brge	.+82     	; 0x1d8c <LCD_voidSendCmnd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9c 8b       	std	Y+20, r25	; 0x14
    1d60:	8b 8b       	std	Y+19, r24	; 0x13
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <LCD_voidSendCmnd+0xee>
    1d64:	88 ec       	ldi	r24, 0xC8	; 200
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9a 8b       	std	Y+18, r25	; 0x12
    1d6a:	89 8b       	std	Y+17, r24	; 0x11
    1d6c:	89 89       	ldd	r24, Y+17	; 0x11
    1d6e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_voidSendCmnd+0xdc>
    1d74:	9a 8b       	std	Y+18, r25	; 0x12
    1d76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d78:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	9c 8b       	std	Y+20, r25	; 0x14
    1d80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d82:	8b 89       	ldd	r24, Y+19	; 0x13
    1d84:	9c 89       	ldd	r25, Y+20	; 0x14
    1d86:	00 97       	sbiw	r24, 0x00	; 0
    1d88:	69 f7       	brne	.-38     	; 0x1d64 <LCD_voidSendCmnd+0xd0>
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <LCD_voidSendCmnd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d90:	8f 89       	ldd	r24, Y+23	; 0x17
    1d92:	98 8d       	ldd	r25, Y+24	; 0x18
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	9c 8b       	std	Y+20, r25	; 0x14
    1d9e:	8b 8b       	std	Y+19, r24	; 0x13
    1da0:	8b 89       	ldd	r24, Y+19	; 0x13
    1da2:	9c 89       	ldd	r25, Y+20	; 0x14
    1da4:	98 8b       	std	Y+16, r25	; 0x10
    1da6:	8f 87       	std	Y+15, r24	; 0x0f
    1da8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1daa:	98 89       	ldd	r25, Y+16	; 0x10
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_voidSendCmnd+0x118>
    1db0:	98 8b       	std	Y+16, r25	; 0x10
    1db2:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	62 e0       	ldi	r22, 0x02	; 2
    1db8:	40 e0       	ldi	r20, 0x00	; 0
    1dba:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>

	/*write the rest of the command */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd<<4);
    1dbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc0:	98 2f       	mov	r25, r24
    1dc2:	92 95       	swap	r25
    1dc4:	90 7f       	andi	r25, 0xF0	; 240
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	69 2f       	mov	r22, r25
    1dca:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_HIGH  */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	62 e0       	ldi	r22, 0x02	; 2
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e0       	ldi	r26, 0x00	; 0
    1dde:	b0 e4       	ldi	r27, 0x40	; 64
    1de0:	8b 87       	std	Y+11, r24	; 0x0b
    1de2:	9c 87       	std	Y+12, r25	; 0x0c
    1de4:	ad 87       	std	Y+13, r26	; 0x0d
    1de6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8f 83       	std	Y+7, r24	; 0x07
    1e02:	98 87       	std	Y+8, r25	; 0x08
    1e04:	a9 87       	std	Y+9, r26	; 0x09
    1e06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <LCD_voidSendCmnd+0x196>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <LCD_voidSendCmnd+0x214>
	else if (__tmp > 65535)
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <LCD_voidSendCmnd+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <LCD_voidSendCmnd+0x1f6>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_voidSendCmnd+0x1e4>
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <LCD_voidSendCmnd+0x1d8>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <LCD_voidSendCmnd+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_voidSendCmnd+0x220>
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
#endif

}
    1ec6:	6d 96       	adiw	r28, 0x1d	; 29
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <LCD_voidSendChar>:
/***************************************************************************************/
/* Description! Interface to write character on LCD screen                             */
/* Input      ! Data to send                                                           */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendChar(u8 Copy_u8Data) {
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	ab 97       	sbiw	r28, 0x2b	; 43
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	8b a7       	std	Y+43, r24	; 0x2b
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Set RS to HIG */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>

	/* Set R/W to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>

	/* Load Command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data);
    1f0c:	83 e0       	ldi	r24, 0x03	; 3
    1f0e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1f10:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	62 e0       	ldi	r22, 0x02	; 2
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e0       	ldi	r26, 0x00	; 0
    1f24:	b0 e4       	ldi	r27, 0x40	; 64
    1f26:	8f a3       	std	Y+39, r24	; 0x27
    1f28:	98 a7       	std	Y+40, r25	; 0x28
    1f2a:	a9 a7       	std	Y+41, r26	; 0x29
    1f2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f30:	78 a5       	ldd	r23, Y+40	; 0x28
    1f32:	89 a5       	ldd	r24, Y+41	; 0x29
    1f34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a ef       	ldi	r20, 0xFA	; 250
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8b a3       	std	Y+35, r24	; 0x23
    1f48:	9c a3       	std	Y+36, r25	; 0x24
    1f4a:	ad a3       	std	Y+37, r26	; 0x25
    1f4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f50:	7c a1       	ldd	r23, Y+36	; 0x24
    1f52:	8d a1       	ldd	r24, Y+37	; 0x25
    1f54:	9e a1       	ldd	r25, Y+38	; 0x26
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <LCD_voidSendChar+0x98>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9a a3       	std	Y+34, r25	; 0x22
    1f6c:	89 a3       	std	Y+33, r24	; 0x21
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <LCD_voidSendChar+0x116>
	else if (__tmp > 65535)
    1f70:	6b a1       	ldd	r22, Y+35	; 0x23
    1f72:	7c a1       	ldd	r23, Y+36	; 0x24
    1f74:	8d a1       	ldd	r24, Y+37	; 0x25
    1f76:	9e a1       	ldd	r25, Y+38	; 0x26
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	4c f5       	brge	.+82     	; 0x1fda <LCD_voidSendChar+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	6f a1       	ldd	r22, Y+39	; 0x27
    1f8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9a a3       	std	Y+34, r25	; 0x22
    1fae:	89 a3       	std	Y+33, r24	; 0x21
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <LCD_voidSendChar+0xf8>
    1fb2:	88 ec       	ldi	r24, 0xC8	; 200
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	98 a3       	std	Y+32, r25	; 0x20
    1fb8:	8f 8f       	std	Y+31, r24	; 0x1f
    1fba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fbc:	98 a1       	ldd	r25, Y+32	; 0x20
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <LCD_voidSendChar+0xe6>
    1fc2:	98 a3       	std	Y+32, r25	; 0x20
    1fc4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	9a a3       	std	Y+34, r25	; 0x22
    1fce:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <LCD_voidSendChar+0xda>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <LCD_voidSendChar+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	6b a1       	ldd	r22, Y+35	; 0x23
    1fdc:	7c a1       	ldd	r23, Y+36	; 0x24
    1fde:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9a a3       	std	Y+34, r25	; 0x22
    1fec:	89 a3       	std	Y+33, r24	; 0x21
    1fee:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_voidSendChar+0x122>
    1ffe:	9e 8f       	std	Y+30, r25	; 0x1e
    2000:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	62 e0       	ldi	r22, 0x02	; 2
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>

	/*Load the rest of the command on Data bus */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT, Copy_u8Data<<4);
    200c:	8b a5       	ldd	r24, Y+43	; 0x2b
    200e:	98 2f       	mov	r25, r24
    2010:	92 95       	swap	r25
    2012:	90 7f       	andi	r25, 0xF0	; 240
    2014:	83 e0       	ldi	r24, 0x03	; 3
    2016:	69 2f       	mov	r22, r25
    2018:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DIO_u8SetPortValue>

	/* Set E to DIO_u8_LOW */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	62 e0       	ldi	r22, 0x02	; 2
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e4       	ldi	r27, 0x40	; 64
    202e:	89 8f       	std	Y+25, r24	; 0x19
    2030:	9a 8f       	std	Y+26, r25	; 0x1a
    2032:	ab 8f       	std	Y+27, r26	; 0x1b
    2034:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	69 8d       	ldd	r22, Y+25	; 0x19
    2038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	8d 8b       	std	Y+21, r24	; 0x15
    2050:	9e 8b       	std	Y+22, r25	; 0x16
    2052:	af 8b       	std	Y+23, r26	; 0x17
    2054:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <LCD_voidSendChar+0x1a0>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 8b       	std	Y+20, r25	; 0x14
    2074:	8b 8b       	std	Y+19, r24	; 0x13
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <LCD_voidSendChar+0x21e>
	else if (__tmp > 65535)
    2078:	6d 89       	ldd	r22, Y+21	; 0x15
    207a:	7e 89       	ldd	r23, Y+22	; 0x16
    207c:	8f 89       	ldd	r24, Y+23	; 0x17
    207e:	98 8d       	ldd	r25, Y+24	; 0x18
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <LCD_voidSendChar+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	69 8d       	ldd	r22, Y+25	; 0x19
    2092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9c 8b       	std	Y+20, r25	; 0x14
    20b6:	8b 8b       	std	Y+19, r24	; 0x13
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_voidSendChar+0x200>
    20ba:	88 ec       	ldi	r24, 0xC8	; 200
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9a 8b       	std	Y+18, r25	; 0x12
    20c0:	89 8b       	std	Y+17, r24	; 0x11
    20c2:	89 89       	ldd	r24, Y+17	; 0x11
    20c4:	9a 89       	ldd	r25, Y+18	; 0x12
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_voidSendChar+0x1ee>
    20ca:	9a 8b       	std	Y+18, r25	; 0x12
    20cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8b 89       	ldd	r24, Y+19	; 0x13
    20d0:	9c 89       	ldd	r25, Y+20	; 0x14
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9c 8b       	std	Y+20, r25	; 0x14
    20d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8b 89       	ldd	r24, Y+19	; 0x13
    20da:	9c 89       	ldd	r25, Y+20	; 0x14
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <LCD_voidSendChar+0x1e2>
    20e0:	14 c0       	rjmp	.+40     	; 0x210a <LCD_voidSendChar+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	6d 89       	ldd	r22, Y+21	; 0x15
    20e4:	7e 89       	ldd	r23, Y+22	; 0x16
    20e6:	8f 89       	ldd	r24, Y+23	; 0x17
    20e8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9c 8b       	std	Y+20, r25	; 0x14
    20f4:	8b 8b       	std	Y+19, r24	; 0x13
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	98 8b       	std	Y+16, r25	; 0x10
    20fc:	8f 87       	std	Y+15, r24	; 0x0f
    20fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2100:	98 89       	ldd	r25, Y+16	; 0x10
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_voidSendChar+0x22a>
    2106:	98 8b       	std	Y+16, r25	; 0x10
    2108:	8f 87       	std	Y+15, r24	; 0x0f

	/* Wait for E to settle */
	_delay_ms(2);

	/* Set E to DIO_u8_HIGH */
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	62 e0       	ldi	r22, 0x02	; 2
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e0       	ldi	r26, 0x00	; 0
    211a:	b0 e4       	ldi	r27, 0x40	; 64
    211c:	8b 87       	std	Y+11, r24	; 0x0b
    211e:	9c 87       	std	Y+12, r25	; 0x0c
    2120:	ad 87       	std	Y+13, r26	; 0x0d
    2122:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	4a ef       	ldi	r20, 0xFA	; 250
    2132:	54 e4       	ldi	r21, 0x44	; 68
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8f 83       	std	Y+7, r24	; 0x07
    213e:	98 87       	std	Y+8, r25	; 0x08
    2140:	a9 87       	std	Y+9, r26	; 0x09
    2142:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <LCD_voidSendChar+0x28e>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9e 83       	std	Y+6, r25	; 0x06
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	3f c0       	rjmp	.+126    	; 0x21e4 <LCD_voidSendChar+0x30c>
	else if (__tmp > 65535)
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	3f ef       	ldi	r19, 0xFF	; 255
    2172:	4f e7       	ldi	r20, 0x7F	; 127
    2174:	57 e4       	ldi	r21, 0x47	; 71
    2176:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    217a:	18 16       	cp	r1, r24
    217c:	4c f5       	brge	.+82     	; 0x21d0 <LCD_voidSendChar+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2180:	7c 85       	ldd	r23, Y+12	; 0x0c
    2182:	8d 85       	ldd	r24, Y+13	; 0x0d
    2184:	9e 85       	ldd	r25, Y+14	; 0x0e
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e2       	ldi	r20, 0x20	; 32
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
    21a6:	0f c0       	rjmp	.+30     	; 0x21c6 <LCD_voidSendChar+0x2ee>
    21a8:	88 ec       	ldi	r24, 0xC8	; 200
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 83       	std	Y+4, r25	; 0x04
    21ae:	8b 83       	std	Y+3, r24	; 0x03
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_voidSendChar+0x2dc>
    21b8:	9c 83       	std	Y+4, r25	; 0x04
    21ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21bc:	8d 81       	ldd	r24, Y+5	; 0x05
    21be:	9e 81       	ldd	r25, Y+6	; 0x06
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	69 f7       	brne	.-38     	; 0x21a8 <LCD_voidSendChar+0x2d0>
    21ce:	14 c0       	rjmp	.+40     	; 0x21f8 <LCD_voidSendChar+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	9a 83       	std	Y+2, r25	; 0x02
    21ea:	89 83       	std	Y+1, r24	; 0x01
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_voidSendChar+0x318>
    21f4:	9a 83       	std	Y+2, r25	; 0x02
    21f6:	89 83       	std	Y+1, r24	; 0x01
	/* Delay to let the LCD Display the character */
	_delay_ms(2);

#endif

}
    21f8:	ab 96       	adiw	r28, 0x2b	; 43
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <LCD_voidSendString>:
/***************************************************************************************/
/* Description! Interface to write string on LCD screen                                */
/* Input      ! Pointer to the string                                                  */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendString(u8 *Copy_pu8String) {
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	00 d0       	rcall	.+0      	; 0x2210 <LCD_voidSendString+0x6>
    2210:	0f 92       	push	r0
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	9b 83       	std	Y+3, r25	; 0x03
    2218:	8a 83       	std	Y+2, r24	; 0x02

	//	/* Local loop index */
		//	u8 u8Index = 0;
		u8 iteration=0;
    221a:	19 82       	std	Y+1, r1	; 0x01
		//	while (pu8StringCpy[u8Index] != '\0')
		for (iteration=0; Copy_pu8String[iteration]!= '\0' ; iteration++)
    221c:	19 82       	std	Y+1, r1	; 0x01
    221e:	0e c0       	rjmp	.+28     	; 0x223c <LCD_voidSendString+0x32>
		{
			/* Write Character on LCD */
			LCD_voidSendChar(Copy_pu8String[iteration]);
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	9b 81       	ldd	r25, Y+3	; 0x03
    222a:	fc 01       	movw	r30, r24
    222c:	e2 0f       	add	r30, r18
    222e:	f3 1f       	adc	r31, r19
    2230:	80 81       	ld	r24, Z
    2232:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>

	//	/* Local loop index */
		//	u8 u8Index = 0;
		u8 iteration=0;
		//	while (pu8StringCpy[u8Index] != '\0')
		for (iteration=0; Copy_pu8String[iteration]!= '\0' ; iteration++)
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	8f 5f       	subi	r24, 0xFF	; 255
    223a:	89 83       	std	Y+1, r24	; 0x01
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	9b 81       	ldd	r25, Y+3	; 0x03
    2246:	fc 01       	movw	r30, r24
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	80 81       	ld	r24, Z
    224e:	88 23       	and	r24, r24
    2250:	39 f7       	brne	.-50     	; 0x2220 <LCD_voidSendString+0x16>
			LCD_voidSendChar(Copy_pu8String[iteration]);

			//		/* Increment local loop index */
			//		u8Index++;
		}
}
    2252:	0f 90       	pop	r0
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <LCD_voidGotoxy>:
/***************************************************************************************/
/* Description! Interface to start the writing process at certain digit in the LCD     */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidGotoxy(u8 Copy_u8Y, u8 Copy_u8X) {
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	00 d0       	rcall	.+0      	; 0x2264 <LCD_voidGotoxy+0x6>
    2264:	00 d0       	rcall	.+0      	; 0x2266 <LCD_voidGotoxy+0x8>
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8X > 0 && Copy_u8X <= 16) {
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	88 23       	and	r24, r24
    2272:	e1 f0       	breq	.+56     	; 0x22ac <LCD_voidGotoxy+0x4e>
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	81 31       	cpi	r24, 0x11	; 17
    2278:	c8 f4       	brcc	.+50     	; 0x22ac <LCD_voidGotoxy+0x4e>
		switch (Copy_u8Y) {
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	3c 83       	std	Y+4, r19	; 0x04
    2282:	2b 83       	std	Y+3, r18	; 0x03
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	91 05       	cpc	r25, r1
    228c:	31 f0       	breq	.+12     	; 0x229a <LCD_voidGotoxy+0x3c>
    228e:	2b 81       	ldd	r18, Y+3	; 0x03
    2290:	3c 81       	ldd	r19, Y+4	; 0x04
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	31 f0       	breq	.+12     	; 0x22a4 <LCD_voidGotoxy+0x46>
    2298:	09 c0       	rjmp	.+18     	; 0x22ac <LCD_voidGotoxy+0x4e>
		case 1:
			LCD_voidSendCmnd(Copy_u8X + 127);
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	81 58       	subi	r24, 0x81	; 129
    229e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
    22a2:	04 c0       	rjmp	.+8      	; 0x22ac <LCD_voidGotoxy+0x4e>
			break;
		case 2:
			LCD_voidSendCmnd(Copy_u8X + 191);
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	81 54       	subi	r24, 0x41	; 65
    22a8:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
			break;
		default:
			break;
		}
	}
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <LCD_voidSendExtraChar>:
/***************************************************************************************/
/* Description! Interface to write extra characters saved in the CGRAM                 */
/* Input      ! Y = Row position , X = Column position                                 */
/* Output     ! Nothing                                                                */
/***************************************************************************************/
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	cd b7       	in	r28, 0x3d	; 61
    22c0:	de b7       	in	r29, 0x3e	; 62
    22c2:	62 97       	sbiw	r28, 0x12	; 18
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	89 8b       	std	Y+17, r24	; 0x11
    22d0:	6a 8b       	std	Y+18, r22	; 0x12
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
    22d2:	80 e4       	ldi	r24, 0x40	; 64
    22d4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    22d8:	18 8a       	std	Y+16, r1	; 0x10
    22da:	0c c0       	rjmp	.+24     	; 0x22f4 <LCD_voidSendExtraChar+0x3a>
		LCD_voidSendChar(ExtraChar[iteration1]);
    22dc:	88 89       	ldd	r24, Y+16	; 0x10
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	fc 01       	movw	r30, r24
    22e4:	e0 58       	subi	r30, 0x80	; 128
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>
void LCD_voidSendExtraChar(u8 Copy_u8Y, u8 Copy_u8X) {
	u8 iteration1, iteration2;

	/*DDRAM-->CGRAM*/
	LCD_voidSendCmnd(64);
	for (iteration1 = 0; iteration1 < 64; iteration1++) {
    22ee:	88 89       	ldd	r24, Y+16	; 0x10
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	88 8b       	std	Y+16, r24	; 0x10
    22f4:	88 89       	ldd	r24, Y+16	; 0x10
    22f6:	80 34       	cpi	r24, 0x40	; 64
    22f8:	88 f3       	brcs	.-30     	; 0x22dc <LCD_voidSendExtraChar+0x22>
		LCD_voidSendChar(ExtraChar[iteration1]);
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
    22fa:	80 e8       	ldi	r24, 0x80	; 128
    22fc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
    2300:	89 89       	ldd	r24, Y+17	; 0x11
    2302:	6a 89       	ldd	r22, Y+18	; 0x12
    2304:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_voidGotoxy>
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    2308:	1f 86       	std	Y+15, r1	; 0x0f
    230a:	78 c0       	rjmp	.+240    	; 0x23fc <LCD_voidSendExtraChar+0x142>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);
    230c:	8f 85       	ldd	r24, Y+15	; 0x0f
    230e:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	a0 ea       	ldi	r26, 0xA0	; 160
    2318:	b0 e4       	ldi	r27, 0x40	; 64
    231a:	8b 87       	std	Y+11, r24	; 0x0b
    231c:	9c 87       	std	Y+12, r25	; 0x0c
    231e:	ad 87       	std	Y+13, r26	; 0x0d
    2320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2322:	6b 85       	ldd	r22, Y+11	; 0x0b
    2324:	7c 85       	ldd	r23, Y+12	; 0x0c
    2326:	8d 85       	ldd	r24, Y+13	; 0x0d
    2328:	9e 85       	ldd	r25, Y+14	; 0x0e
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4a ef       	ldi	r20, 0xFA	; 250
    2330:	54 e4       	ldi	r21, 0x44	; 68
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8f 83       	std	Y+7, r24	; 0x07
    233c:	98 87       	std	Y+8, r25	; 0x08
    233e:	a9 87       	std	Y+9, r26	; 0x09
    2340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	2c f4       	brge	.+10     	; 0x2364 <LCD_voidSendExtraChar+0xaa>
		__ticks = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	3f c0       	rjmp	.+126    	; 0x23e2 <LCD_voidSendExtraChar+0x128>
	else if (__tmp > 65535)
    2364:	6f 81       	ldd	r22, Y+7	; 0x07
    2366:	78 85       	ldd	r23, Y+8	; 0x08
    2368:	89 85       	ldd	r24, Y+9	; 0x09
    236a:	9a 85       	ldd	r25, Y+10	; 0x0a
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	4c f5       	brge	.+82     	; 0x23ce <LCD_voidSendExtraChar+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237c:	6b 85       	ldd	r22, Y+11	; 0x0b
    237e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2380:	8d 85       	ldd	r24, Y+13	; 0x0d
    2382:	9e 85       	ldd	r25, Y+14	; 0x0e
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	51 e4       	ldi	r21, 0x41	; 65
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <LCD_voidSendExtraChar+0x10a>
    23a6:	88 ec       	ldi	r24, 0xC8	; 200
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_voidSendExtraChar+0xf8>
    23b6:	9c 83       	std	Y+4, r25	; 0x04
    23b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ba:	8d 81       	ldd	r24, Y+5	; 0x05
    23bc:	9e 81       	ldd	r25, Y+6	; 0x06
    23be:	01 97       	sbiw	r24, 0x01	; 1
    23c0:	9e 83       	std	Y+6, r25	; 0x06
    23c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c4:	8d 81       	ldd	r24, Y+5	; 0x05
    23c6:	9e 81       	ldd	r25, Y+6	; 0x06
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	69 f7       	brne	.-38     	; 0x23a6 <LCD_voidSendExtraChar+0xec>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <LCD_voidSendExtraChar+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	78 85       	ldd	r23, Y+8	; 0x08
    23d2:	89 85       	ldd	r24, Y+9	; 0x09
    23d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9e 83       	std	Y+6, r25	; 0x06
    23e0:	8d 83       	std	Y+5, r24	; 0x05
    23e2:	8d 81       	ldd	r24, Y+5	; 0x05
    23e4:	9e 81       	ldd	r25, Y+6	; 0x06
    23e6:	9a 83       	std	Y+2, r25	; 0x02
    23e8:	89 83       	std	Y+1, r24	; 0x01
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	9a 81       	ldd	r25, Y+2	; 0x02
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	f1 f7       	brne	.-4      	; 0x23ee <LCD_voidSendExtraChar+0x134>
    23f2:	9a 83       	std	Y+2, r25	; 0x02
    23f4:	89 83       	std	Y+1, r24	; 0x01
	}
	/*CGRAM-->DDRAM*/
	LCD_voidSendCmnd(128);
	LCD_voidGotoxy(Copy_u8Y, Copy_u8X);
	/*First eight character which saved at CGRAM*/
	for (iteration2 = 0; iteration2 <= 7; iteration2++) {
    23f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f8:	8f 5f       	subi	r24, 0xFF	; 255
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
    23fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fe:	88 30       	cpi	r24, 0x08	; 8
    2400:	08 f4       	brcc	.+2      	; 0x2404 <LCD_voidSendExtraChar+0x14a>
    2402:	84 cf       	rjmp	.-248    	; 0x230c <LCD_voidSendExtraChar+0x52>
		/* Write bytes of DDRAM */
		LCD_voidSendChar(iteration2);

		_delay_ms(5);
	}
}
    2404:	62 96       	adiw	r28, 0x12	; 18
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCD_voidWriteSpecialCharacter>:

/*  New */
void LCD_voidWriteSpecialCharacter(u8 *Copy_pu8Pattern, u8 Copy_u8PatternNumber,
		u8 Copy_u8XPos, u8 Copy_u8YPos) {
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
    241e:	27 97       	sbiw	r28, 0x07	; 7
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	9c 83       	std	Y+4, r25	; 0x04
    242c:	8b 83       	std	Y+3, r24	; 0x03
    242e:	6d 83       	std	Y+5, r22	; 0x05
    2430:	4e 83       	std	Y+6, r20	; 0x06
    2432:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address, Local_u8PatternCounter;

	/*1- Calculate the required address of CGRAM*/
	Local_u8Address = Copy_u8PatternNumber * 8;
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	88 2f       	mov	r24, r24
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	8a 83       	std	Y+2, r24	; 0x02

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	80 5c       	subi	r24, 0xC0	; 192
    244c:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    2450:	19 82       	std	Y+1, r1	; 0x01
    2452:	0e c0       	rjmp	.+28     	; 0x2470 <LCD_voidWriteSpecialCharacter+0x5a>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	fc 01       	movw	r30, r24
    2460:	e2 0f       	add	r30, r18
    2462:	f3 1f       	adc	r31, r19
    2464:	80 81       	ld	r24, Z
    2466:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>
	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
			Local_u8PatternCounter++) {
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	8f 5f       	subi	r24, 0xFF	; 255
    246e:	89 83       	std	Y+1, r24	; 0x01

	/*2- Set CGRAM Address with bit 6 equal to 1 and bit 7 equal to 0*/
	LCD_voidSendCmnd(Local_u8Address + 64);

	/*3- write the required pattern inside the CGRAM*/
	for (Local_u8PatternCounter = 0; Local_u8PatternCounter < 8;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	88 30       	cpi	r24, 0x08	; 8
    2474:	78 f3       	brcs	.-34     	; 0x2454 <LCD_voidWriteSpecialCharacter+0x3e>
			Local_u8PatternCounter++) {
		LCD_voidSendChar(Copy_pu8Pattern[Local_u8PatternCounter]);
	}

	/*4- shift the address counter to the DDRAM*/
	LCD_voidGotoxy(Copy_u8XPos, Copy_u8YPos);
    2476:	8e 81       	ldd	r24, Y+6	; 0x06
    2478:	6f 81       	ldd	r22, Y+7	; 0x07
    247a:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_voidGotoxy>

	/*5- Display the CGRAM pattern on the LCD*/
	LCD_voidSendChar(Copy_u8PatternNumber);
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>

}
    2484:	27 96       	adiw	r28, 0x07	; 7
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <main>:
u8 op = '\0';

void numberToString(u16 num, u8 *str);
u16 stringToNumber(u8 *str);

int main(void) {
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	63 97       	sbiw	r28, 0x13	; 19
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    24aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	LCD_voidInit();
    24ae:	0e 94 22 0b 	call	0x1644	; 0x1644 <LCD_voidInit>
	LCD_voidGotoxy(1, 1);
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	0e 94 2f 11 	call	0x225e	; 0x225e <LCD_voidGotoxy>

	u8 key;
	LCD_voidSendChar(key);
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>
	while (1) {

		KPD_u8GetKeyState(&key);
    24c0:	ce 01       	movw	r24, r28
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	0e 94 13 0a 	call	0x1426	; 0x1426 <KPD_u8GetKeyState>
		if (key != KPD_u8_KEY_NOT_PRESSED
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	8f 3f       	cpi	r24, 0xFF	; 255
    24cc:	c1 f1       	breq	.+112    	; 0x253e <main+0xa8>
    24ce:	89 81       	ldd	r24, Y+1	; 0x01
    24d0:	81 33       	cpi	r24, 0x31	; 49
    24d2:	d9 f0       	breq	.+54     	; 0x250a <main+0x74>
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	82 33       	cpi	r24, 0x32	; 50
    24d8:	c1 f0       	breq	.+48     	; 0x250a <main+0x74>
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	83 33       	cpi	r24, 0x33	; 51
    24de:	a9 f0       	breq	.+42     	; 0x250a <main+0x74>
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	84 33       	cpi	r24, 0x34	; 52
    24e4:	91 f0       	breq	.+36     	; 0x250a <main+0x74>
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	85 33       	cpi	r24, 0x35	; 53
    24ea:	79 f0       	breq	.+30     	; 0x250a <main+0x74>
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	86 33       	cpi	r24, 0x36	; 54
    24f0:	61 f0       	breq	.+24     	; 0x250a <main+0x74>
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	87 33       	cpi	r24, 0x37	; 55
    24f6:	49 f0       	breq	.+18     	; 0x250a <main+0x74>
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	88 33       	cpi	r24, 0x38	; 56
    24fc:	31 f0       	breq	.+12     	; 0x250a <main+0x74>
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	89 33       	cpi	r24, 0x39	; 57
    2502:	19 f0       	breq	.+6      	; 0x250a <main+0x74>
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	80 33       	cpi	r24, 0x30	; 48
    2508:	d1 f4       	brne	.+52     	; 0x253e <main+0xa8>
				&& (key == '1' || key == '2' || key == '3' || key == '4'
						|| key == '5' || key == '6' || key == '7' || key == '8'
						|| key == '9' || key == '0')) {
			if (flagClear == 1) {
    250a:	80 91 98 00 	lds	r24, 0x0098
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	29 f4       	brne	.+10     	; 0x251c <main+0x86>
				LCD_voidSendCmnd(LCD_CLEAR);
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
				flagClear = 0;
    2518:	10 92 98 00 	sts	0x0098, r1
			}
			buffer[buffer_pos++] = key;
    251c:	30 91 99 00 	lds	r19, 0x0099
    2520:	83 2f       	mov	r24, r19
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	29 81       	ldd	r18, Y+1	; 0x01
    2526:	fc 01       	movw	r30, r24
    2528:	e8 57       	subi	r30, 0x78	; 120
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	20 83       	st	Z, r18
    252e:	83 2f       	mov	r24, r19
    2530:	8f 5f       	subi	r24, 0xFF	; 255
    2532:	80 93 99 00 	sts	0x0099, r24
			LCD_voidSendChar(key);
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>
    253c:	c1 cf       	rjmp	.-126    	; 0x24c0 <main+0x2a>
		} else if (key == '+' || key == '-' || key == '*' || key == '/') {
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	8b 32       	cpi	r24, 0x2B	; 43
    2542:	49 f0       	breq	.+18     	; 0x2556 <main+0xc0>
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	8d 32       	cpi	r24, 0x2D	; 45
    2548:	31 f0       	breq	.+12     	; 0x2556 <main+0xc0>
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	8a 32       	cpi	r24, 0x2A	; 42
    254e:	19 f0       	breq	.+6      	; 0x2556 <main+0xc0>
    2550:	89 81       	ldd	r24, Y+1	; 0x01
    2552:	8f 32       	cpi	r24, 0x2F	; 47
    2554:	c9 f4       	brne	.+50     	; 0x2588 <main+0xf2>
			// Store first number and operator
			LCD_voidSendChar(key);
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>
			num1 = stringToNumber(buffer);
    255c:	88 e8       	ldi	r24, 0x88	; 136
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 85 13 	call	0x270a	; 0x270a <stringToNumber>
    2564:	90 93 9b 00 	sts	0x009B, r25
    2568:	80 93 9a 00 	sts	0x009A, r24
			memset(buffer, 0, sizeof(buffer));	//clear buffer
    256c:	88 e8       	ldi	r24, 0x88	; 136
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	40 e1       	ldi	r20, 0x10	; 16
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <memset>
			op = key;
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	80 93 a0 00 	sts	0x00A0, r24
			buffer_pos = 0;
    2582:	10 92 99 00 	sts	0x0099, r1
    2586:	9c cf       	rjmp	.-200    	; 0x24c0 <main+0x2a>
		}

		else if (key == '=') {
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	8d 33       	cpi	r24, 0x3D	; 61
    258c:	09 f0       	breq	.+2      	; 0x2590 <main+0xfa>
    258e:	ab c0       	rjmp	.+342    	; 0x26e6 <main+0x250>
			//LCD_voidSendCmnd(LCD_CLEAR);//clear LCD to print output
			flagClear = 1;	//flag is up after evry process
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	80 93 98 00 	sts	0x0098, r24
			// Store the second number and perform the calculation
			num2 = stringToNumber(buffer);
    2596:	88 e8       	ldi	r24, 0x88	; 136
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 85 13 	call	0x270a	; 0x270a <stringToNumber>
    259e:	90 93 9d 00 	sts	0x009D, r25
    25a2:	80 93 9c 00 	sts	0x009C, r24
			memset(buffer, 0, sizeof(buffer));
    25a6:	88 e8       	ldi	r24, 0x88	; 136
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	70 e0       	ldi	r23, 0x00	; 0
    25ae:	40 e1       	ldi	r20, 0x10	; 16
    25b0:	50 e0       	ldi	r21, 0x00	; 0
    25b2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <memset>
			switch (op) {
    25b6:	80 91 a0 00 	lds	r24, 0x00A0
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	3b 8b       	std	Y+19, r19	; 0x13
    25c0:	2a 8b       	std	Y+18, r18	; 0x12
    25c2:	4a 89       	ldd	r20, Y+18	; 0x12
    25c4:	5b 89       	ldd	r21, Y+19	; 0x13
    25c6:	4b 32       	cpi	r20, 0x2B	; 43
    25c8:	51 05       	cpc	r21, r1
    25ca:	b1 f0       	breq	.+44     	; 0x25f8 <main+0x162>
    25cc:	8a 89       	ldd	r24, Y+18	; 0x12
    25ce:	9b 89       	ldd	r25, Y+19	; 0x13
    25d0:	8c 32       	cpi	r24, 0x2C	; 44
    25d2:	91 05       	cpc	r25, r1
    25d4:	34 f4       	brge	.+12     	; 0x25e2 <main+0x14c>
    25d6:	2a 89       	ldd	r18, Y+18	; 0x12
    25d8:	3b 89       	ldd	r19, Y+19	; 0x13
    25da:	2a 32       	cpi	r18, 0x2A	; 42
    25dc:	31 05       	cpc	r19, r1
    25de:	51 f1       	breq	.+84     	; 0x2634 <main+0x19e>
    25e0:	4e c0       	rjmp	.+156    	; 0x267e <main+0x1e8>
    25e2:	4a 89       	ldd	r20, Y+18	; 0x12
    25e4:	5b 89       	ldd	r21, Y+19	; 0x13
    25e6:	4d 32       	cpi	r20, 0x2D	; 45
    25e8:	51 05       	cpc	r21, r1
    25ea:	a9 f0       	breq	.+42     	; 0x2616 <main+0x180>
    25ec:	8a 89       	ldd	r24, Y+18	; 0x12
    25ee:	9b 89       	ldd	r25, Y+19	; 0x13
    25f0:	8f 32       	cpi	r24, 0x2F	; 47
    25f2:	91 05       	cpc	r25, r1
    25f4:	a1 f1       	breq	.+104    	; 0x265e <main+0x1c8>
    25f6:	43 c0       	rjmp	.+134    	; 0x267e <main+0x1e8>
			case '+':
				result = num1 + num2;
    25f8:	80 91 9a 00 	lds	r24, 0x009A
    25fc:	90 91 9b 00 	lds	r25, 0x009B
    2600:	20 91 9c 00 	lds	r18, 0x009C
    2604:	30 91 9d 00 	lds	r19, 0x009D
    2608:	82 0f       	add	r24, r18
    260a:	93 1f       	adc	r25, r19
    260c:	90 93 9f 00 	sts	0x009F, r25
    2610:	80 93 9e 00 	sts	0x009E, r24
    2614:	34 c0       	rjmp	.+104    	; 0x267e <main+0x1e8>
				break;
			case '-':
				result = num1 - num2;
    2616:	80 91 9a 00 	lds	r24, 0x009A
    261a:	90 91 9b 00 	lds	r25, 0x009B
    261e:	20 91 9c 00 	lds	r18, 0x009C
    2622:	30 91 9d 00 	lds	r19, 0x009D
    2626:	82 1b       	sub	r24, r18
    2628:	93 0b       	sbc	r25, r19
    262a:	90 93 9f 00 	sts	0x009F, r25
    262e:	80 93 9e 00 	sts	0x009E, r24
    2632:	25 c0       	rjmp	.+74     	; 0x267e <main+0x1e8>
				break;
			case '*':
				result = num1 * num2;
    2634:	80 91 9a 00 	lds	r24, 0x009A
    2638:	90 91 9b 00 	lds	r25, 0x009B
    263c:	20 91 9c 00 	lds	r18, 0x009C
    2640:	30 91 9d 00 	lds	r19, 0x009D
    2644:	ac 01       	movw	r20, r24
    2646:	42 9f       	mul	r20, r18
    2648:	c0 01       	movw	r24, r0
    264a:	43 9f       	mul	r20, r19
    264c:	90 0d       	add	r25, r0
    264e:	52 9f       	mul	r21, r18
    2650:	90 0d       	add	r25, r0
    2652:	11 24       	eor	r1, r1
    2654:	90 93 9f 00 	sts	0x009F, r25
    2658:	80 93 9e 00 	sts	0x009E, r24
    265c:	10 c0       	rjmp	.+32     	; 0x267e <main+0x1e8>
				break;
			case '/':
				result = num1 / num2;
    265e:	80 91 9a 00 	lds	r24, 0x009A
    2662:	90 91 9b 00 	lds	r25, 0x009B
    2666:	20 91 9c 00 	lds	r18, 0x009C
    266a:	30 91 9d 00 	lds	r19, 0x009D
    266e:	b9 01       	movw	r22, r18
    2670:	0e 94 8a 14 	call	0x2914	; 0x2914 <__divmodhi4>
    2674:	cb 01       	movw	r24, r22
    2676:	90 93 9f 00 	sts	0x009F, r25
    267a:	80 93 9e 00 	sts	0x009E, r24
				break;
			}
			LCD_voidSendChar('=');
    267e:	8d e3       	ldi	r24, 0x3D	; 61
    2680:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>
			if (result < 0) {
    2684:	80 91 9e 00 	lds	r24, 0x009E
    2688:	90 91 9f 00 	lds	r25, 0x009F
    268c:	99 23       	and	r25, r25
    268e:	74 f4       	brge	.+28     	; 0x26ac <main+0x216>
				result *= -1;
    2690:	80 91 9e 00 	lds	r24, 0x009E
    2694:	90 91 9f 00 	lds	r25, 0x009F
    2698:	90 95       	com	r25
    269a:	81 95       	neg	r24
    269c:	9f 4f       	sbci	r25, 0xFF	; 255
    269e:	90 93 9f 00 	sts	0x009F, r25
    26a2:	80 93 9e 00 	sts	0x009E, r24
				LCD_voidSendChar('-');
    26a6:	8d e2       	ldi	r24, 0x2D	; 45
    26a8:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidSendChar>
			}
			// Display result on LCD
			u8 result_str[16];
			numberToString(result, result_str);
    26ac:	80 91 9e 00 	lds	r24, 0x009E
    26b0:	90 91 9f 00 	lds	r25, 0x009F
    26b4:	9e 01       	movw	r18, r28
    26b6:	2e 5f       	subi	r18, 0xFE	; 254
    26b8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ba:	b9 01       	movw	r22, r18
    26bc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <numberToString>
			LCD_voidSendString(result_str);
    26c0:	ce 01       	movw	r24, r28
    26c2:	02 96       	adiw	r24, 0x02	; 2
    26c4:	0e 94 05 11 	call	0x220a	; 0x220a <LCD_voidSendString>
			buffer_pos = 0;
    26c8:	10 92 99 00 	sts	0x0099, r1
			num1 = 0, num2 = 0, result = 0;
    26cc:	10 92 9b 00 	sts	0x009B, r1
    26d0:	10 92 9a 00 	sts	0x009A, r1
    26d4:	10 92 9d 00 	sts	0x009D, r1
    26d8:	10 92 9c 00 	sts	0x009C, r1
    26dc:	10 92 9f 00 	sts	0x009F, r1
    26e0:	10 92 9e 00 	sts	0x009E, r1
    26e4:	ed ce       	rjmp	.-550    	; 0x24c0 <main+0x2a>
		}
		// Handle C input
		else if (key == 'C') {
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	83 34       	cpi	r24, 0x43	; 67
    26ea:	09 f0       	breq	.+2      	; 0x26ee <main+0x258>
    26ec:	e9 ce       	rjmp	.-558    	; 0x24c0 <main+0x2a>
			memset(buffer, 0, sizeof(buffer));
    26ee:	88 e8       	ldi	r24, 0x88	; 136
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	40 e1       	ldi	r20, 0x10	; 16
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <memset>
			buffer_pos = 0;
    26fe:	10 92 99 00 	sts	0x0099, r1
			LCD_voidSendCmnd(LCD_CLEAR);
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <LCD_voidSendCmnd>
    2708:	db ce       	rjmp	.-586    	; 0x24c0 <main+0x2a>

0000270a <stringToNumber>:
	};

	return 0;
}

u16 stringToNumber(u8 *str) {
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	28 97       	sbiw	r28, 0x08	; 8
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
	u16 result = 0;
    2722:	1c 82       	std	Y+4, r1	; 0x04
    2724:	1b 82       	std	Y+3, r1	; 0x03
	u16 sign = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9a 83       	std	Y+2, r25	; 0x02
    272c:	89 83       	std	Y+1, r24	; 0x01
	if (*str == '-') {
    272e:	ed 81       	ldd	r30, Y+5	; 0x05
    2730:	fe 81       	ldd	r31, Y+6	; 0x06
    2732:	80 81       	ld	r24, Z
    2734:	8d 32       	cpi	r24, 0x2D	; 45
    2736:	91 f5       	brne	.+100    	; 0x279c <stringToNumber+0x92>
		sign = -1;
    2738:	8f ef       	ldi	r24, 0xFF	; 255
    273a:	9f ef       	ldi	r25, 0xFF	; 255
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
		str++;
    2740:	8d 81       	ldd	r24, Y+5	; 0x05
    2742:	9e 81       	ldd	r25, Y+6	; 0x06
    2744:	01 96       	adiw	r24, 0x01	; 1
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	8d 83       	std	Y+5, r24	; 0x05
    274a:	28 c0       	rjmp	.+80     	; 0x279c <stringToNumber+0x92>
	}
	while (*str != '\0') {
		if (*str < '0' || *str > '9') {
    274c:	ed 81       	ldd	r30, Y+5	; 0x05
    274e:	fe 81       	ldd	r31, Y+6	; 0x06
    2750:	80 81       	ld	r24, Z
    2752:	80 33       	cpi	r24, 0x30	; 48
    2754:	28 f0       	brcs	.+10     	; 0x2760 <stringToNumber+0x56>
    2756:	ed 81       	ldd	r30, Y+5	; 0x05
    2758:	fe 81       	ldd	r31, Y+6	; 0x06
    275a:	80 81       	ld	r24, Z
    275c:	8a 33       	cpi	r24, 0x3A	; 58
    275e:	18 f0       	brcs	.+6      	; 0x2766 <stringToNumber+0x5c>
			// invalid character
			return 0;
    2760:	18 86       	std	Y+8, r1	; 0x08
    2762:	1f 82       	std	Y+7, r1	; 0x07
    2764:	2d c0       	rjmp	.+90     	; 0x27c0 <stringToNumber+0xb6>
		}
		result = result * 10 + (*str - '0');
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	9c 01       	movw	r18, r24
    276c:	22 0f       	add	r18, r18
    276e:	33 1f       	adc	r19, r19
    2770:	c9 01       	movw	r24, r18
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	28 0f       	add	r18, r24
    277c:	39 1f       	adc	r19, r25
    277e:	ed 81       	ldd	r30, Y+5	; 0x05
    2780:	fe 81       	ldd	r31, Y+6	; 0x06
    2782:	80 81       	ld	r24, Z
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	82 0f       	add	r24, r18
    278a:	93 1f       	adc	r25, r19
    278c:	c0 97       	sbiw	r24, 0x30	; 48
    278e:	9c 83       	std	Y+4, r25	; 0x04
    2790:	8b 83       	std	Y+3, r24	; 0x03
		str++;
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
	u16 sign = 1;
	if (*str == '-') {
		sign = -1;
		str++;
	}
	while (*str != '\0') {
    279c:	ed 81       	ldd	r30, Y+5	; 0x05
    279e:	fe 81       	ldd	r31, Y+6	; 0x06
    27a0:	80 81       	ld	r24, Z
    27a2:	88 23       	and	r24, r24
    27a4:	99 f6       	brne	.-90     	; 0x274c <stringToNumber+0x42>
			return 0;
		}
		result = result * 10 + (*str - '0');
		str++;
	}
	return sign * result;
    27a6:	29 81       	ldd	r18, Y+1	; 0x01
    27a8:	3a 81       	ldd	r19, Y+2	; 0x02
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	9c 81       	ldd	r25, Y+4	; 0x04
    27ae:	28 9f       	mul	r18, r24
    27b0:	a0 01       	movw	r20, r0
    27b2:	29 9f       	mul	r18, r25
    27b4:	50 0d       	add	r21, r0
    27b6:	38 9f       	mul	r19, r24
    27b8:	50 0d       	add	r21, r0
    27ba:	11 24       	eor	r1, r1
    27bc:	58 87       	std	Y+8, r21	; 0x08
    27be:	4f 83       	std	Y+7, r20	; 0x07
    27c0:	8f 81       	ldd	r24, Y+7	; 0x07
    27c2:	98 85       	ldd	r25, Y+8	; 0x08
}
    27c4:	28 96       	adiw	r28, 0x08	; 8
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <numberToString>:

void numberToString(u16 num, u8 *str) {
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	29 97       	sbiw	r28, 0x09	; 9
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61
    27ea:	9f 83       	std	Y+7, r25	; 0x07
    27ec:	8e 83       	std	Y+6, r24	; 0x06
    27ee:	79 87       	std	Y+9, r23	; 0x09
    27f0:	68 87       	std	Y+8, r22	; 0x08
	u16 i = 0;
    27f2:	1d 82       	std	Y+5, r1	; 0x05
    27f4:	1c 82       	std	Y+4, r1	; 0x04
	if (num < 0) {
		*str++ = '-';
		num *= -1;
	}
	do {
		str[i++] = (num % 10) + '0';
    27f6:	28 85       	ldd	r18, Y+8	; 0x08
    27f8:	39 85       	ldd	r19, Y+9	; 0x09
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	9d 81       	ldd	r25, Y+5	; 0x05
    27fe:	f9 01       	movw	r30, r18
    2800:	e8 0f       	add	r30, r24
    2802:	f9 1f       	adc	r31, r25
    2804:	8e 81       	ldd	r24, Y+6	; 0x06
    2806:	9f 81       	ldd	r25, Y+7	; 0x07
    2808:	2a e0       	ldi	r18, 0x0A	; 10
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	b9 01       	movw	r22, r18
    280e:	0e 94 76 14 	call	0x28ec	; 0x28ec <__udivmodhi4>
    2812:	80 5d       	subi	r24, 0xD0	; 208
    2814:	80 83       	st	Z, r24
    2816:	8c 81       	ldd	r24, Y+4	; 0x04
    2818:	9d 81       	ldd	r25, Y+5	; 0x05
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	9d 83       	std	Y+5, r25	; 0x05
    281e:	8c 83       	std	Y+4, r24	; 0x04
		num /= 10;
    2820:	8e 81       	ldd	r24, Y+6	; 0x06
    2822:	9f 81       	ldd	r25, Y+7	; 0x07
    2824:	2a e0       	ldi	r18, 0x0A	; 10
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	b9 01       	movw	r22, r18
    282a:	0e 94 76 14 	call	0x28ec	; 0x28ec <__udivmodhi4>
    282e:	cb 01       	movw	r24, r22
    2830:	9f 83       	std	Y+7, r25	; 0x07
    2832:	8e 83       	std	Y+6, r24	; 0x06
	} while (num);
    2834:	8e 81       	ldd	r24, Y+6	; 0x06
    2836:	9f 81       	ldd	r25, Y+7	; 0x07
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	e9 f6       	brne	.-70     	; 0x27f6 <numberToString+0x20>
	str[i] = '\0';
    283c:	88 85       	ldd	r24, Y+8	; 0x08
    283e:	99 85       	ldd	r25, Y+9	; 0x09
    2840:	2c 81       	ldd	r18, Y+4	; 0x04
    2842:	3d 81       	ldd	r19, Y+5	; 0x05
    2844:	fc 01       	movw	r30, r24
    2846:	e2 0f       	add	r30, r18
    2848:	f3 1f       	adc	r31, r19
    284a:	10 82       	st	Z, r1
	// Reverse the string
	for (u16 j = 0; j < i / 2; j++) {
    284c:	1b 82       	std	Y+3, r1	; 0x03
    284e:	1a 82       	std	Y+2, r1	; 0x02
    2850:	39 c0       	rjmp	.+114    	; 0x28c4 <numberToString+0xee>
		u8 temp = str[j];
    2852:	28 85       	ldd	r18, Y+8	; 0x08
    2854:	39 85       	ldd	r19, Y+9	; 0x09
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	9b 81       	ldd	r25, Y+3	; 0x03
    285a:	f9 01       	movw	r30, r18
    285c:	e8 0f       	add	r30, r24
    285e:	f9 1f       	adc	r31, r25
    2860:	80 81       	ld	r24, Z
    2862:	89 83       	std	Y+1, r24	; 0x01
		str[j] = str[i - j - 1];
    2864:	28 85       	ldd	r18, Y+8	; 0x08
    2866:	39 85       	ldd	r19, Y+9	; 0x09
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	9b 81       	ldd	r25, Y+3	; 0x03
    286c:	d9 01       	movw	r26, r18
    286e:	a8 0f       	add	r26, r24
    2870:	b9 1f       	adc	r27, r25
    2872:	2c 81       	ldd	r18, Y+4	; 0x04
    2874:	3d 81       	ldd	r19, Y+5	; 0x05
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	a9 01       	movw	r20, r18
    287c:	48 1b       	sub	r20, r24
    287e:	59 0b       	sbc	r21, r25
    2880:	ca 01       	movw	r24, r20
    2882:	9c 01       	movw	r18, r24
    2884:	21 50       	subi	r18, 0x01	; 1
    2886:	30 40       	sbci	r19, 0x00	; 0
    2888:	88 85       	ldd	r24, Y+8	; 0x08
    288a:	99 85       	ldd	r25, Y+9	; 0x09
    288c:	fc 01       	movw	r30, r24
    288e:	e2 0f       	add	r30, r18
    2890:	f3 1f       	adc	r31, r19
    2892:	80 81       	ld	r24, Z
    2894:	8c 93       	st	X, r24
		str[i - j - 1] = temp;
    2896:	2c 81       	ldd	r18, Y+4	; 0x04
    2898:	3d 81       	ldd	r19, Y+5	; 0x05
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	9b 81       	ldd	r25, Y+3	; 0x03
    289e:	a9 01       	movw	r20, r18
    28a0:	48 1b       	sub	r20, r24
    28a2:	59 0b       	sbc	r21, r25
    28a4:	ca 01       	movw	r24, r20
    28a6:	9c 01       	movw	r18, r24
    28a8:	21 50       	subi	r18, 0x01	; 1
    28aa:	30 40       	sbci	r19, 0x00	; 0
    28ac:	88 85       	ldd	r24, Y+8	; 0x08
    28ae:	99 85       	ldd	r25, Y+9	; 0x09
    28b0:	fc 01       	movw	r30, r24
    28b2:	e2 0f       	add	r30, r18
    28b4:	f3 1f       	adc	r31, r19
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	80 83       	st	Z, r24
		str[i++] = (num % 10) + '0';
		num /= 10;
	} while (num);
	str[i] = '\0';
	// Reverse the string
	for (u16 j = 0; j < i / 2; j++) {
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	9b 83       	std	Y+3, r25	; 0x03
    28c2:	8a 83       	std	Y+2, r24	; 0x02
    28c4:	8c 81       	ldd	r24, Y+4	; 0x04
    28c6:	9d 81       	ldd	r25, Y+5	; 0x05
    28c8:	9c 01       	movw	r18, r24
    28ca:	36 95       	lsr	r19
    28cc:	27 95       	ror	r18
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	9b 81       	ldd	r25, Y+3	; 0x03
    28d2:	82 17       	cp	r24, r18
    28d4:	93 07       	cpc	r25, r19
    28d6:	08 f4       	brcc	.+2      	; 0x28da <numberToString+0x104>
    28d8:	bc cf       	rjmp	.-136    	; 0x2852 <numberToString+0x7c>
		u8 temp = str[j];
		str[j] = str[i - j - 1];
		str[i - j - 1] = temp;
	}
}
    28da:	29 96       	adiw	r28, 0x09	; 9
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <__udivmodhi4>:
    28ec:	aa 1b       	sub	r26, r26
    28ee:	bb 1b       	sub	r27, r27
    28f0:	51 e1       	ldi	r21, 0x11	; 17
    28f2:	07 c0       	rjmp	.+14     	; 0x2902 <__udivmodhi4_ep>

000028f4 <__udivmodhi4_loop>:
    28f4:	aa 1f       	adc	r26, r26
    28f6:	bb 1f       	adc	r27, r27
    28f8:	a6 17       	cp	r26, r22
    28fa:	b7 07       	cpc	r27, r23
    28fc:	10 f0       	brcs	.+4      	; 0x2902 <__udivmodhi4_ep>
    28fe:	a6 1b       	sub	r26, r22
    2900:	b7 0b       	sbc	r27, r23

00002902 <__udivmodhi4_ep>:
    2902:	88 1f       	adc	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	5a 95       	dec	r21
    2908:	a9 f7       	brne	.-22     	; 0x28f4 <__udivmodhi4_loop>
    290a:	80 95       	com	r24
    290c:	90 95       	com	r25
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	08 95       	ret

00002914 <__divmodhi4>:
    2914:	97 fb       	bst	r25, 7
    2916:	09 2e       	mov	r0, r25
    2918:	07 26       	eor	r0, r23
    291a:	0a d0       	rcall	.+20     	; 0x2930 <__divmodhi4_neg1>
    291c:	77 fd       	sbrc	r23, 7
    291e:	04 d0       	rcall	.+8      	; 0x2928 <__divmodhi4_neg2>
    2920:	e5 df       	rcall	.-54     	; 0x28ec <__udivmodhi4>
    2922:	06 d0       	rcall	.+12     	; 0x2930 <__divmodhi4_neg1>
    2924:	00 20       	and	r0, r0
    2926:	1a f4       	brpl	.+6      	; 0x292e <__divmodhi4_exit>

00002928 <__divmodhi4_neg2>:
    2928:	70 95       	com	r23
    292a:	61 95       	neg	r22
    292c:	7f 4f       	sbci	r23, 0xFF	; 255

0000292e <__divmodhi4_exit>:
    292e:	08 95       	ret

00002930 <__divmodhi4_neg1>:
    2930:	f6 f7       	brtc	.-4      	; 0x292e <__divmodhi4_exit>
    2932:	90 95       	com	r25
    2934:	81 95       	neg	r24
    2936:	9f 4f       	sbci	r25, 0xFF	; 255
    2938:	08 95       	ret

0000293a <__prologue_saves__>:
    293a:	2f 92       	push	r2
    293c:	3f 92       	push	r3
    293e:	4f 92       	push	r4
    2940:	5f 92       	push	r5
    2942:	6f 92       	push	r6
    2944:	7f 92       	push	r7
    2946:	8f 92       	push	r8
    2948:	9f 92       	push	r9
    294a:	af 92       	push	r10
    294c:	bf 92       	push	r11
    294e:	cf 92       	push	r12
    2950:	df 92       	push	r13
    2952:	ef 92       	push	r14
    2954:	ff 92       	push	r15
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	ca 1b       	sub	r28, r26
    2964:	db 0b       	sbc	r29, r27
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	09 94       	ijmp

00002972 <__epilogue_restores__>:
    2972:	2a 88       	ldd	r2, Y+18	; 0x12
    2974:	39 88       	ldd	r3, Y+17	; 0x11
    2976:	48 88       	ldd	r4, Y+16	; 0x10
    2978:	5f 84       	ldd	r5, Y+15	; 0x0f
    297a:	6e 84       	ldd	r6, Y+14	; 0x0e
    297c:	7d 84       	ldd	r7, Y+13	; 0x0d
    297e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2980:	9b 84       	ldd	r9, Y+11	; 0x0b
    2982:	aa 84       	ldd	r10, Y+10	; 0x0a
    2984:	b9 84       	ldd	r11, Y+9	; 0x09
    2986:	c8 84       	ldd	r12, Y+8	; 0x08
    2988:	df 80       	ldd	r13, Y+7	; 0x07
    298a:	ee 80       	ldd	r14, Y+6	; 0x06
    298c:	fd 80       	ldd	r15, Y+5	; 0x05
    298e:	0c 81       	ldd	r16, Y+4	; 0x04
    2990:	1b 81       	ldd	r17, Y+3	; 0x03
    2992:	aa 81       	ldd	r26, Y+2	; 0x02
    2994:	b9 81       	ldd	r27, Y+1	; 0x01
    2996:	ce 0f       	add	r28, r30
    2998:	d1 1d       	adc	r29, r1
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	ed 01       	movw	r28, r26
    29a6:	08 95       	ret

000029a8 <memset>:
    29a8:	dc 01       	movw	r26, r24
    29aa:	01 c0       	rjmp	.+2      	; 0x29ae <memset+0x6>
    29ac:	6d 93       	st	X+, r22
    29ae:	41 50       	subi	r20, 0x01	; 1
    29b0:	50 40       	sbci	r21, 0x00	; 0
    29b2:	e0 f7       	brcc	.-8      	; 0x29ac <memset+0x4>
    29b4:	08 95       	ret

000029b6 <_exit>:
    29b6:	f8 94       	cli

000029b8 <__stop_program>:
    29b8:	ff cf       	rjmp	.-2      	; 0x29b8 <__stop_program>
